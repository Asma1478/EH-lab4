<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0072)http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/ -->
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Smashing the Stack in 2011 « my 20%</title>

<link rel="stylesheet" href="./Smashing the Stack in 2011 « my 20%_files/style.css" type="text/css" media="screen">

<script async="" type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/gpt.js"></script><script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/base.js"></script>
<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/menu.js"></script>

<link rel="pingback" href="http://paulmakowski.wordpress.com/xmlrpc.php">
<link rel="alternate" type="application/rss+xml" title="my 20% » Feed" href="http://paulmakowski.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="my 20% » Comments Feed" href="http://paulmakowski.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="my 20% » Smashing the Stack in 2011 Comments Feed" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/feed/">
<script type="text/javascript">
/* <![CDATA[ */
function addLoadEvent(func){var oldonload=window.onload;if(typeof window.onload!='function'){window.onload=func;}else{window.onload=function(){oldonload();func();}}}
/* ]]> */
</script>
<link rel="stylesheet" href="./Smashing the Stack in 2011 « my 20%_files/global.css" type="text/css">
<link rel="stylesheet" id="post-reactions-css" href="./Smashing the Stack in 2011 « my 20%_files/style(1).css" type="text/css" media="all">
<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/jquery.js"></script>
<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/comment-reply.js"></script>
<link rel="stylesheet" id="highlander-comments-css" href="./Smashing the Stack in 2011 « my 20%_files/style(2).css" type="text/css" media="all">
<!--[if lt IE 8]>
<link rel='stylesheet' id='highlander-comments-ie7-css'  href='http://s0.wp.com/wp-content/mu-plugins/highlander-comments/style-ie7.css?m=1307172301g&#038;ver=20110606' type='text/css' media='all' />
<![endif]-->
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://paulmakowski.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://paulmakowski.wordpress.com/wp-includes/wlwmanifest.xml"> 
<link rel="index" title="my 20%" href="http://paulmakowski.wordpress.com/">
<link rel="prev" title="Chaocipher: Now with ASCII Support" href="http://paulmakowski.wordpress.com/2010/07/07/chaocipher-now-with-ascii-support/">
<meta name="generator" content="WordPress.com">
<link rel="canonical" href="./Smashing the Stack in 2011 « my 20%_files/Smashing the Stack in 2011 « my 20%.htm">
<link rel="shortlink" href="http://wp.me/pBV1X-5V">
<link rel="alternate" type="application/json+oembed" href="http://public-api.wordpress.com/oembed/1.0/?format=json&url=http%3A%2F%2Fpaulmakowski.wordpress.com%2F2011%2F01%2F25%2Fsmashing-the-stack-in-2011%2F&for=wpcom-auto-discovery"><link rel="alternate" type="application/xml+oembed" href="http://public-api.wordpress.com/oembed/1.0/?format=xml&url=http%3A%2F%2Fpaulmakowski.wordpress.com%2F2011%2F01%2F25%2Fsmashing-the-stack-in-2011%2F&for=wpcom-auto-discovery"><meta property="og:type" content="article">
<meta property="og:title" content="Smashing the Stack in 2011">
<meta property="og:url" content="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/">
<meta property="og:description" content="Recently, as part of Professor Brumley&#39;s Vulnerability, Defense Systems, and Malware Analysis class at Carnegie Mellon, I took another look at Aleph One (Elias Levy)&#39;s Smashing the Stack for Fun an...">
<meta property="og:site_name" content="my 20%">
<meta property="og:image" content="http://1.gravatar.com/blavatar/ff8e23f9620cfb329bfacb6b3a899143?s=300">
<link rel="shortcut icon" type="image/x-icon" href="http://1.gravatar.com/blavatar/99a5cac5a8e9fff4e8417447ffae7396?s=16" sizes="16x16">
<link rel="icon" type="image/x-icon" href="http://1.gravatar.com/blavatar/99a5cac5a8e9fff4e8417447ffae7396?s=16" sizes="16x16">
<link rel="apple-touch-icon-precomposed" href="http://1.gravatar.com/blavatar/ff8e23f9620cfb329bfacb6b3a899143?s=114">
<link rel="openid.server" href="http://paulmakowski.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="http://paulmakowski.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="http://paulmakowski.wordpress.com/osd.xml" title="my 20%">
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com">
	<style type="text/css">
	/* <![CDATA[ */
			/* ]]> */
	</style>
	<meta name="application-name" content="my 20%"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="hacking, breaking things, malware, free time, etc."><meta name="msapplication-task" content="name=Subscribe;action-uri=http://paulmakowski.wordpress.com/feed/;icon-uri=http://1.gravatar.com/blavatar/99a5cac5a8e9fff4e8417447ffae7396?s=16"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico">
<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/liftrtb2_1.js"></script>
<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/WP.js"></script>
<script type="text/javascript"> 
	window.google_analytics_uacct = "UA-52447-2"; 
</script>

<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-52447-2']);
	_gaq.push(['_setDomainName', 'wordpress.com']);
	_gaq.push(['_initData']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
	})();
</script><script type="text/javascript" async="" src="./Smashing the Stack in 2011 « my 20%_files/ga.js"></script>
<script async="" type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/google_ads_gpt.js"></script><link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Smashing the Stack in 2011 « my 20%_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Smashing the Stack in 2011 « my 20%_files/services.css"></head>

<body class="typekit-enabled highlander-enabled highlander-light">
<!-- wrap START -->
<div id="wrap">

<!-- container START -->
<div id="container">

<!-- header START -->
<div id="header">

	<!-- banner START -->
		<!-- banner END -->

	<div id="caption">
		<h1 id="title"><a href="http://paulmakowski.wordpress.com/">my 20%</a></h1>
		<div id="tagline">hacking, breaking things, malware, free time, etc.</div>
	</div>

	<div class="fixed"></div>
</div>
<!-- header END -->

<!-- navigation START -->
<div id="navigation">
	<!-- menus START -->
	<ul id="menus">
	<li class=""><a class="home" title="Home" href="http://paulmakowski.wordpress.com/">Home</a></li>
	<li class="page_item page-item-2"><a href="http://paulmakowski.wordpress.com/about/" title="About Me">About&nbsp;Me</a></li>
<li class="page_item page-item-301"><a href="http://paulmakowski.wordpress.com/undergraduate-thesis/" title="Undergraduate Thesis (TRECC)">Undergraduate Thesis&nbsp;(TRECC)</a></li>
	<li><a class="lastmenu" href="javascript:void(0);"></a></li>
</ul>

	<!-- menus END -->

	<!-- searchbox START -->
	<div id="searchbox">
		<form action="http://paulmakowski.wordpress.com/" method="get">
			<div class="content">
				<input type="text" class="textfield searchtip" name="s" size="24" value="">
				<input type="submit" class="button" value="">
			</div>
		</form>
	</div>
<script type="text/javascript">
//<![CDATA[
	var searchbox = MGJS.$("searchbox");
	var searchtxt = MGJS.getElementsByClassName("textfield", "input", searchbox)[0];
	var searchbtn = MGJS.getElementsByClassName("button", "input", searchbox)[0];
	var tiptext = "Type text to search here...";
	if(searchtxt.value == "" || searchtxt.value == tiptext) {
		searchtxt.className += " searchtip";
		searchtxt.value = tiptext;
	}
	searchtxt.onfocus = function(e) {
		if(searchtxt.value == tiptext) {
			searchtxt.value = "";
			searchtxt.className = searchtxt.className.replace(" searchtip", "");
		}
	}
	searchtxt.onblur = function(e) {
		if(searchtxt.value == "") {
			searchtxt.className += " searchtip";
			searchtxt.value = tiptext;
		}
	}
	searchbtn.onclick = function(e) {
		if(searchtxt.value == "" || searchtxt.value == tiptext) {
			return false;
		}
	}
//]]>
</script>
	<!-- searchbox END -->

	<div class="fixed"></div>
</div>
<!-- navigation END -->

<!-- content START -->
<div id="content">

	<!-- main START -->
	<div id="main">


	<div id="postpath">
		<a title="Go to homepage" href="http://paulmakowski.wordpress.com/">Home</a>
		 &gt; <a href="http://paulmakowski.wordpress.com/category/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a>		 &gt; Smashing the Stack in&nbsp;2011	</div>

	<div class="post" id="post-367">
		<h2>Smashing the Stack in&nbsp;2011</h2>
		<div class="info">
			<span class="date">January 25, 2011</span>
													<span class="addcomment"><a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#respond">Leave a comment</a></span>
				<span class="comments"><a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comments">Go to comments</a></span>
						<div class="fixed"></div>
		</div>
		<div class="content">
			<p>Recently, as part of <a href="http://www.ece.cmu.edu/~dbrumley/">Professor</a> <a href="http://security.ece.cmu.edu/">Brumley</a>‘s <a href="http://www.ece.cmu.edu/~dbrumley/courses/18739c-s11/">Vulnerability, Defense Systems, and Malware Analysis</a> class at Carnegie Mellon, I took another look at Aleph One (Elias Levy)’s <a href="http://insecure.org/stf/smashstack.html"><em>Smashing the Stack for Fun and Profit</em></a> article which had originally appeared in <a href="http://www.phrack.com/">Phrack</a> and on <a href="http://seclists.org/bugtraq/">Bugtraq</a> in November of 1996.&nbsp; Newcomers to exploit development are often still referred (and rightly so) to Aleph’s paper.&nbsp; <em>Smashing the Stack</em> was the first lucid tutorial on the topic of exploiting stack based buffer overflow vulnerabilities.&nbsp; Perhaps even more important was <em>Smashing the Stack</em>‘s ability to force the reader to think like an attacker.&nbsp; While the specifics mentioned in the paper apply only to stack based buffer overflows, the thought process that Aleph suggested to the reader is one that will yield success in any type of exploit development.</p>
<p>(Un)fortunately for today’s would be exploit developer, much has changed since 1996, and unless Aleph’s tutorial is carried out with additional instructions or on a particularly old machine, some of the exercises presented in <em>Smashing the Stack</em> will no longer work.&nbsp; There are a number of reasons for this, some incidental, some intentional.&nbsp; I attempt to enumerate the <em>intentional </em>hurdles here and provide instruction for overcoming some of the challenges that fifteen years of exploit defense research has presented to the attacker.&nbsp; An effort is made to maintain the tutorial feel of Aleph’s article.</p>
<h1><span id="more-367"></span></h1>
<h1>Related Work</h1>
<ul>
<li>Craig J. Heffner wrote a <a href="http://www.ethicalhacker.net/content/view/122/2/">similar article</a>, which appeared on<a href="http://www.ethicalhacker.net/"> The Ethical Hacker Network</a> in February of 2007.&nbsp; This article differs from Heffner’s by way of emphasis placed on exploit mitigations developed since 1996 and their effect on several excerpts from <em>Smashing the Stack</em> as well as their effect on several of Aleph’s examples.&nbsp; Also, several years have passed since Heffner’s article and another update couldn’t hurt.</li>
<li><a href="http://www.mgraziano.info/">Mariano Graziano</a> and Andrea Cugliari wrote a much more formal paper, <a href="http://www.mgraziano.info/docs/stsi2010.pdf"><em>Smashing the stack in 2010</em></a>, on the mitigations discussed here as well as their counterparts on Windows.&nbsp; From their abstract: <em>“First of all we are going to analyze all the basical theoretical aspects behind the concept of Buffer Overflows…Subsequently the paper will analyze in detail all the aspects and mechanisms that regulate the way in which Buffer Overflow works on Linux and Windows architectures taking with particular care also the countermeasures introduced until nowadays for both the mentioned operating systems…we are going also to try some tricks to bypass these protections, in order to exploit the vulnerability even if a countermeasure has been adopted in the modern operating systems.”</em> Regrettably, I had only become aware of their paper after I had published this post, and while Graziano/Cugliari’s paper and this blog post serve different purposes, my apologies to Graziano &amp; Cugliari for failing to find their paper previously.</li>
</ul>
<h1>Introduction</h1>
<p>Ubuntu has become a popular distribution for new Linux users as of late, so it’s probably not inappropriate to assume that budding security professionals interested in learning more about memory corruption exploitation have a certain likelihood to use the distribution.&nbsp; As such, all instructions presented here have been tested on Ubuntu 10.10 i386 desktop vanilla (no updates; the only additional required package is <a href="http://pwet.fr/man/linux/administration_systeme/execstack">execstack</a>) running within VMWare Workstation 7.1.3.&nbsp; Furthermore, Ubuntu provides a <a href="https://wiki.ubuntu.com/Security/Features">convenient table</a> telling us what we’re up against.&nbsp; While these instructions have been tested on Ubuntu 10.10, their specifics should not vary greatly between distributions.&nbsp; Google is your friend.</p>
<p>My intention is for the reader to have this article open in one tab and <a href="http://insecure.org/stf/smashstack.html"><em>Smashing the Stack</em></a> open in another.&nbsp; Much of what Aleph explains has not changed since 1996 (e.g. the x86 <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Application_Binary_Interface">ABI</a>), so it would make little sense to repeat him here.&nbsp; Rather, I will pick and choose excerpts &amp; examples that have become antiquated in some way, explain how they have been rendered so and what we can do to complete Aleph’s tutorial.&nbsp; Changes to gcc that have nothing to do with exploit mitigations are glossed over.</p>
<p>Let’s begin.</p>
<h1>Dynamic Buffers</h1>
<blockquote><p>Dynamic variables are allocated at run time on&nbsp; the stack…We will concern ourselves only with the overflow of dynamic buffers, otherwise known as stack-based buffer overflows.</p></blockquote>
<p>Aleph implies that an exploit author’s interest in dynamic buffers is limited to those found on the stack. Since 1996, much work has been completed on the topic of exploiting heap-based dynamic buffers as well, making such an implication antiquated.&nbsp; The distinction between the types of allocations is commonly made by CS majors by referring to stack locals as <em>automatic</em>, while reserving the word <em>dynamic </em>for heap allocations.</p>
<p>Matt Conover and the w00w00 Security Team authored the <a href="http://www.cgsecurity.org/exploit/heaptut.txt">seminal paper</a> on the topic of heap-based buffer overflow exploitation in January of 1999.</p>
<h1>Use of the EBP/RBP Registers</h1>
<blockquote><p>Consequently, many compilers use a second register, FP, for referencing both local variables and parameters because their distances from FP do not change with PUSHes and POPs. On Intel CPUs, BP (EBP) is used for this purpose.</p></blockquote>
<p>It’s worth noting that on the <a href="https://secure.wikimedia.org/wikipedia/en/wiki/X86-64">AMD64/x86-64</a> architecture, 64bit OSes typically do <em>not </em>treat EBP (RBP is the equivalent 64bit register on the AMD64 architecture) as a special purpose register, as is common on x86 architectures.&nbsp; This is one of many reasons why attempting <em>Smashing the Stack</em> on a AMD64 OS would make little sense.</p>
<p>Instead, [R|E]BP may be used as a general purpose register.&nbsp; It should be noted (thank you, Prof Brumley!) that while it is <em>convention </em>to treat EBP as a pointer to a stack frame on x86 systems, there is nothing that forces a developer to treat the register as such.&nbsp; That being said, if you’re developing for x86 Linux/Windows/OS X/etc and <em>don’t</em> use EBP according to convention, then you may run into trouble.&nbsp; I can’t think of any specific examples, but you’ve been warned.</p>
<p>Why mention this?&nbsp; EBP on x86 is treated as a control element – it points to the location of the previous stack frame.&nbsp; Controlling this value would be beneficial for an attacker (see: <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Return-oriented_programming">return oriented programming</a>).&nbsp; Knowing the difference in convention between x86 and AMD64 architectures is therefore interesting to an attacker.</p>
<h1>NX<strong><br>
</strong></h1>
<blockquote><p>Our code modifies itself, but most operating system (sic) mark code pages read-only. To get around this restriction we must place the code we wish to execute in the stack or data segment, and transfer control to it. To do so we will place our code in a global array in the data segment.</p></blockquote>
<p>This is where the past fifteen years offers us something exciting.&nbsp; On recent x86 architectures (Pentium 4+), operating systems and compilers, Intel’s<a href="https://secure.wikimedia.org/wikipedia/en/wiki/NX_bit"> eXecute Disable Bit</a> (referred to as <em>NX</em> by Linux, as <em>DEP</em> or <em>NX</em> by Windows, and as <em>Enhanced Virus Protection</em>* by AMD) renders the above statement misleading. Jumping to the .data segment as Aleph suggests on a modern system would more than likely cause an segmentation fault, since a data segment should not legitimately contain executable code and will more than likely be stored in a page that has the NX bit set.</p>
<h6>*That’s a terrible name.</h6>
<p>Think of the idea as akin to POSIX permissions: different users/groups have different R(ead), W(rite) and (e)X(ecute) permissions on different files.&nbsp; In 1996, x86 architectures only had the concept of R(ead) and W(rite) on memory pages.&nbsp; If something was R(eadable), then it was also (e)X(ecutable).&nbsp; Pentium 4 introduced hardware support for explicitly specifying whether a particular page should be (e)X(ecutable), hence <em>NX</em>.</p>
<p>Disabling NX mitigations varies with operating system and compiler; a gcc 4.4.5 / Ubuntu 10.10 method will be seen later in the examples.</p>
<h1>Stack Protection &amp; example2.c</h1>
<blockquote><p>This… program has a function with a typical buffer overflow coding error.&nbsp; The function copies a supplied string without bounds checking by using strcpy() instead of strncpy().&nbsp; If you run this program you will get a segmentation violation.</p></blockquote>
<p>The intent of this example is to crash the process by clobbering the return address, causing the process to attempt to return to 0×41414141 (‘AAAA’).&nbsp; The process certainly still crashes, but not for the same reason.&nbsp; Let’s look at the output generated by executing example2.c:</p>
<pre>vmuser@ubuntu:~$ nano example2.c
vmuser@ubuntu:~$ gcc -o example2 example2.c
example2.c: In function ‘function’:
example2.c:4: warning: incompatible implicit declaration of built-in function ‘strcpy’
vmuser@ubuntu:~$ ./example2
<strong>*** stack smashing detected ***</strong>: ./example2 terminated
======= Backtrace: =========
/lib/libc.so.6(__fortify_fail+0x50)[0x6ad980]
/lib/libc.so.6(+0xe592a)[0x6ad92a]
./example2[0x804844e]
[<strong>0x41414141</strong>]
======= Memory map: ========
0027f000-0029b000 r-xp 00000000 08:01 1051128    /lib/ld-2.12.1.so
(omitted)</pre>
<p>What happened here?&nbsp; Recent versions of gcc include the capability to build a mechanism for stack buffer protection into compiled programs.&nbsp; This capability is called <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Buffer_overflow_protection">ProPolice</a>, and according to Wikipedia, it’s been largely unchanged since gcc 4.1 (Ubuntu 10.10 ships with gcc 4.4.5).&nbsp; A ProPolice patch is available for gcc 3.x versions and was added to the trunk in 4.x releases.&nbsp; The concept of the stack canary was originally proposed by Crispin Cowan in 1997 as StackGuard.&nbsp; The interested reader is referred to the <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Buffer_overflow_protection">Wikipedia entry</a>.</p>
<p>OK, what does ProPolice/StackGuard/etc do?</p>
<p>The basic idea is to place a chosen or psuedo-random value between a stack frame’s data elements (e.g. char * buffers) and its control elements (e.g. RET address, stored EBP) that is either difficult for an attacker to replace during an attack or impossible for an attacker to predict.&nbsp; Before the function whose frame has been clobbered is allowed to return, this <em>canary</em> is checked against a known good.&nbsp; If that check fails, the process terminates, since it now considers its execution path to be in an untrusted state.&nbsp; <em>“Canary”</em> is used to describe this inserted value as a homage to the old practice of keeping canaries (the birds) in mines as a way to determine when the mine’s atmosphere becomes toxic (the canaries die before the toxicity level reaches a point that is dangerous for humans).</p>
<p>OK, so how do we get the results that Aleph intended us to?</p>
<p>Simple: compile example2.c without stack protection:</p>
<pre>vmuser@ubuntu:~$ gcc -o example2 example2.c <strong>-fno-stack-protector</strong>
example2.c: In function ‘function’:
example2.c:4: warning: incompatible implicit declaration of built-in function ‘strcpy’
vmuser@ubuntu:~$ ./example2
Segmentation fault</pre>
<p>Sweet, we crashed.&nbsp; Win?</p>
<h1>example3.c</h1>
<p>This example is uninteresting from an exploit mitigation standpoint.&nbsp; Stack protection will not need to be disabled, since we are directly modifying the RET address, rather than overflowing to it.&nbsp; NX is irrelevant since we’re still returning into an eXecutable code segment.&nbsp; ASLR (discussed later) is also irrelevant since we do not require knowledge of an absolute memory address.&nbsp; Instead, example3 adds a static amount to the return address location.</p>
<p>This example does not work (it still prints ’1′) on Ubuntu 10.10, but because this is due to factors that have nothing to do with exploit mitigations, I refer the reader to Craig Heffner’s <a href="http://www.ethicalhacker.net/content/view/122/2/">article</a> referenced earlier.</p>
<h1>ProPolice, NX &amp; overflow1.c</h1>
<blockquote><p>We have the shellcode.&nbsp; We know it must be part of the string which we’ll use to overflow the buffer.&nbsp; We&nbsp; know we must point the return address back into the buffer.</p></blockquote>
<p>True in 1996, not so much in 2011.&nbsp; As with many modern OSes, Ubuntu 10.10 executables as NX-compatible by default.&nbsp; This is, of course, in addition to the default gcc 4.4.5 behavior of adding stack protection during compilation.&nbsp; In order to get this example to work, we’re going to need to disable a couple of exploit mitigations.</p>
<p>Without any exploit mitigations:</p>
<pre>vmuser@ubuntu:~$ gcc -o overflow1 overflow1.c
overflow1.c: In function ‘main’:
overflow1.c:16: warning: incompatible implicit declaration of built-in function ‘strlen’
overflow1.c:19: warning: incompatible implicit declaration of built-in function ‘strcpy’
vmuser@ubuntu:~$ ./overflow1
*** stack smashing detected ***: ./overflow1 terminated
======= Backtrace: =========
/lib/libc.so.6(__fortify_fail+0x50)[0x410980]
/lib/libc.so.6(+0xe592a)[0x41092a]
./overflow1[0x80484ea]
/lib/libc.so.6(__libc_start_main+0x0)[0x341c00]
[0xc0310876]
======= Memory map: ========
0032b000-00482000 r-xp 00000000 08:01 1051152&nbsp;&nbsp;&nbsp; /lib/libc-2.12.1.so
(omitted)</pre>
<p>ProPolice disabled:</p>
<pre>vmuser@ubuntu:~$ gcc -o overflow1 overflow1.c <strong>-fno-stack-protector</strong>
overflow1.c: In function ‘main’:
overflow1.c:16: warning: incompatible implicit declaration of built-in function ‘strlen’
overflow1.c:19: warning: incompatible implicit declaration of built-in function ‘strcpy’
vmuser@ubuntu:~$ ./overflow1
vmuser@ubuntu:~$</pre>
<p>Odd.&nbsp; It didn’t crash, but it also didn’t spawn a new shell.&nbsp; It turns out that this is due to gcc allocating far more stack space in recent versions than the gcc that Aleph was working with.&nbsp; Again, this isn’t directly relevant to exploit mitigations, so I’m going to gloss over the reasoning behind this.</p>
<p>We need to modify overflow1.c in order to account for large amount of stack space allocated by our gcc 4.4.5:</p>
<pre>overflow1.c
------------------------------------------------------------------------------
...
  long *long_ptr = (long *) large_string;

  for (i = 0; i &lt; <strong>128</strong>; i++) <strong>&lt;-- change this to 128 iterations</strong>
    *(long_ptr + i) = (int) buffer;
...
------------------------------------------------------------------------------</pre>
<p>Make this modification to your overflow1.c, compile without ProPolice stack protection and with gdb debug symbols, then try executing again:</p>
<pre>vmuser@ubuntu:~$ gcc -o overflow1 <strong>-fno-stack-protector -ggdb</strong> overflow1.c
overflow1.c: In function ‘main’:
overflow1.c:16: warning: incompatible implicit declaration of built-in function ‘strlen’
overflow1.c:19: warning: incompatible implicit declaration of built-in function ‘strcpy’
vmuser@ubuntu:~$ ./overflow1
Segmentation fault</pre>
<p>Alright: a crash!&nbsp; We may be onto something.&nbsp; Let’s take a look at what’s happening in gdb:</p>
<pre>vmuser@ubuntu:~$ <strong>gdb overflow1</strong>
(omitted)
(gdb) <strong>b strcpy &lt;-- break at the call to strcpy()</strong>
Breakpoint 1 at 0x8048324
(gdb) <strong>run</strong> &lt;-- start program
Starting program: /home/vmuser/overflow1
Breakpoint 1, 0x001a31c5 in strcpy () from /lib/libc.so.6
(gdb) <strong>finish &lt;-- continue execution until strcpy() returns</strong>
Run till exit from #0&nbsp; 0x001a31c5 in strcpy () from /lib/libc.so.6
main () at overflow1.c:20
20&nbsp;&nbsp;&nbsp; }
(gdb) <strong>disas &lt;-- let's see where we are</strong>
Dump of assembler code for function main:
(omitted)
=&gt; 0x0804847c &lt;+136&gt;:&nbsp;&nbsp;&nbsp; add&nbsp;&nbsp;&nbsp; $0x8c,%esp
 0x08048482 &lt;+142&gt;:&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp; %ebx
 0x08048483 &lt;+143&gt;:&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp; %ebp,%esp
 0x08048485 &lt;+145&gt;:&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp; %ebp
 0x08048486 &lt;+146&gt;:&nbsp;&nbsp;&nbsp; ret&nbsp;&nbsp;&nbsp;
(omitted)
(gdb) <strong>si &lt;-- step a few more instructions until we're at the ret</strong>
0x08048482&nbsp;&nbsp;&nbsp; 20&nbsp;&nbsp;&nbsp; }
(gdb) <strong>si &lt;-- keep stepping...</strong>
0x08048483&nbsp;&nbsp;&nbsp; 20&nbsp;&nbsp;&nbsp; }
(gdb) <strong>si &lt;-- and stepping...</strong>
0x08048485&nbsp;&nbsp;&nbsp; 20&nbsp;&nbsp;&nbsp; }
(gdb) <strong>si &lt;-- last one</strong>
0x08048486 in main () at overflow1.c:20
20&nbsp;&nbsp;&nbsp; }
(gdb) disas
Dump of assembler code for function main:
(omitted)
=&gt; 0x08048486 &lt;+146&gt;:&nbsp;&nbsp;&nbsp; ret <strong>&lt;-- OK we're here</strong>
(omitted)
(gdb) <strong>x/a $esp &lt;-- to where will we 'return'?</strong>
0xbffff3fc:&nbsp;&nbsp;&nbsp; 0xbffff378
(gdb) <strong>x/16x 0xbffff378 &lt;-- what's at this address?</strong>
0xbffff378:&nbsp;&nbsp;&nbsp; 0x895e1feb&nbsp;&nbsp;&nbsp; 0xc0310876&nbsp;&nbsp;&nbsp; 0x89074688&nbsp;&nbsp;&nbsp; 0x0bb00c46
0xbffff388:&nbsp;&nbsp;&nbsp; 0x4e8df389&nbsp;&nbsp;&nbsp; 0x0c568d08&nbsp;&nbsp;&nbsp; 0xdb3180cd&nbsp;&nbsp;&nbsp; 0xcd40d889
0xbffff398:&nbsp;&nbsp;&nbsp; 0xffdce880&nbsp;&nbsp;&nbsp; 0x622fffff&nbsp;&nbsp;&nbsp; 0x732f6e69&nbsp;&nbsp;&nbsp; 0xbffff368
0xbffff3a8:&nbsp;&nbsp;&nbsp; 0xbffff378&nbsp;&nbsp;&nbsp; 0xbffff378&nbsp;&nbsp;&nbsp; 0xbffff378&nbsp;&nbsp;&nbsp; 0xbffff378</pre>
<p>That should look familiar; it’s the beginning of our shellcode.&nbsp; What happens if we attempt to continue?</p>
<pre>(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x08048486 in main () at overflow1.c:20
20&nbsp;&nbsp;&nbsp; }</pre>
<p>Segmentation fault.&nbsp; That darn NX bit is ruining our day.&nbsp; Let’s disable it.</p>
<pre>sudo apt-get update
sudo apt-get install execstac</pre>
<p><a href="http://pwet.fr/man/linux/administration_systeme/execstack">execstack</a> is a very simple program that modifies ELF headers to enable/disable NX protection on the stack in target binaries.&nbsp; Linux will respect the values placed in the ELF headers because it is not uncommon for an old binary to require an eXecutable stack.&nbsp; For a Windows equivalent discussion, take a look at <a href="http://www.phreedom.org/research/bypassing-browser-memory-protections/bypassing-browser-memory-protections.pdf">ATL Thunk emulation</a> (warning: PDF*; search “ATL thunk” within the document).</p>
<h6>* An awesome PDF, that is.</h6>
<p>Let’s disable the NX bit and try once more:</p>
<pre>vmuser@ubuntu:~$ <strong>execstack -s</strong> overflow1
vmuser@ubuntu:~$ ./overflow1
$ exit
vmuser@ubuntu:~$</pre>
<p>Bingo.</p>
<h1>ASLR &amp; a Bunch of Examples</h1>
<blockquote><p>The problem we are faced when trying to overflow the buffer of another program is trying to figure out at what address the buffer (and thus our code) will be.&nbsp; The answer is that for every program the stack will start at the same address.</p></blockquote>
<p>This is no longer true.&nbsp; Most modern desktop and server OSes rebase their stacks, code segments, dynamically loaded libraries and more in order to make a target address space unpredictable to an attacker.&nbsp; Address Space Layout Randomization (ASLR) is <a href="http://benpfaff.org/papers/asrandom.pdf">not particularly effective on the x86 architecture</a> (warning: PDF) and enjoys a much larger amount of entropy on the AMD64 architecture.&nbsp; Regardless of the amount of bits available for pseudo-random rebasing, ASLR provides another hurdle for the attacker to overcome.&nbsp; Unless the target process is a daemon that spawns a separate process on each exploitation attempt and then silently ignores segmentation faults &amp; exceptions, the lower amount of entropy available to x86 OSes is still going to prevent the attacker from conducting a successful exploit without a significant chance of a crash.</p>
<p>The inclusion of ASLR in Ubuntu 10.10 prevents us from gathering the type of results that 1996 would allow us to gather.&nbsp; In order to find a static stack pointer value (sp.c is deterministic, so the value shouldn’t change in the normal course of execution), we need to disable ASLR.</p>
<p>First, let’s see what happens with ASLR enabled:</p>
<pre>vmuser@ubuntu:~$ gcc -o sp sp.c
sp.c: In function ‘main’:
sp.c:5: warning: incompatible implicit declaration of built-in function ‘printf’
sp.c:5: warning: format ‘%x’ expects type ‘unsigned int’, but argument 2 has type ‘long unsigned int’
vmuser@ubuntu:~$ ./sp
0xbfe83d18
vmuser@ubuntu:~$ ./sp
0xbfda6be8
vmuser@ubuntu:~$ ./sp
0xbf907128</pre>
<p>As you can see, the location of the bottom of the stack (pointed to by ESP) changes on every execution.</p>
<p>Now, let’s disable ASLR and try again:</p>
<pre>vmuser@ubuntu:~$ sudo su &lt;-- see 'anon's comment below for explanation
[sudo] password for vmuser:
root@ubuntu:/home/vmuser# echo 0 &gt; /proc/sys/kernel/randomize_va_space
root@ubuntu:/home/vmuser# cat /proc/sys/kernel/randomize_va_space
0
root@ubuntu:/home/vmuser# exit
exit
vmuser@ubuntu:~$ ./sp
0xbffff428
vmuser@ubuntu:~$ ./sp
0xbffff428
vmuser@ubuntu:~$ ./sp
0xbffff428</pre>
<p>With ASLR disabled, we see results similar to Aleph’s description.&nbsp; A deterministic program like sp.c should, without ASLR, print the same location on every execution.&nbsp; Exploits often rely on the knowledge of where exactly something is mapped in target address space.&nbsp; ASLR removes this knowledge from a would-be attacker.&nbsp; The interested reader is referred to the <a href="http://www.kernel.org/pub/linux/kernel/people/jikos/randomization/brk-fix-2.patch">randomize_va_space kernel patch</a> for an explanation of possible values.</p>
<p>What does ASLR mean for exploit2.c as a primer to an attack on vulnerable.c?&nbsp; Well, you’re in for a lot more guessing.&nbsp; More importantly, any guess you choose will never be <em>right</em>, since the target space will be rebased on subsequent executions.&nbsp; Using such an exploitation strategy would require guessing many times, every time – something that is often not feasible against real world applications.</p>
<p>What about exploit3.c?&nbsp; In exploit3.c Aleph introduces a nopsled to his attack string.&nbsp; This will still help, because guessing within a range preceding the shellcode (or in more general terms: the payload) will still allow one to execute shellcode.&nbsp; The idea of a nopsled is tangential to the idea of ASLR.&nbsp; ASLR will still prevent exploit3.c from working reliably, albeit slightly more reliably than exploit2.c</p>
<p>OK, what about Aleph’s technique of storing shellcode in an environment value?&nbsp; Also affected by ASLR.&nbsp; The example presented in exploit4.c will also require a lot of guessing with no correct answer in the face of ASLR.</p>
<p>If you wish to complete these examples, my suggestion is just to disable ASLR via /proc as demonstrated previously.</p>
<h1>Conclusion</h1>
<p>I’ve attempted to enumerate the challenges that the past 15 years of exploit research defense as applicable to Aleph’s seminal paper, <em>Smashing the Stack for Fun and Profit</em> and give instruction on how one might go about following Aleph’s tutorial on a modern OS, with a specific nod to Ubuntu 10.10.</p>
<p>There is, however, a very good chance I missed something.</p>
<p>Corrections, suggestions, critiques are much appreciated.&nbsp; My hope is that this is helpful to some people; it certainly would have been helpful to me when I read <em>Smashing the Stack</em> for the first time.</p>

<div id="wpcom_below_post" style="text-align: center; background: #; padding: 5px; margin: 10px auto; width: 300px;">
<span style="text-align: left; letter-spacing: 1px; font: 8px/1em Verdana, sans-serif; color: #ccc; text-transform: uppercase; display: block; padding: 0 1px;">Advertisement</span>
<script type="text/javascript">
LD_AddCustomAttr("AdOpt", "0");
LD_AddCustomAttr("Origin", "extsearch");
LD_AddCustomAttr("SearchTerm", "linux"); 
LD_AddCustomAttr("SearchTerm", "disable"); 
LD_AddCustomAttr("SearchTerm", "nx"); 
LD_AddCustomAttr("SearchTerm", "bit"); 
LD_AddCustomAttr("theme_bg", "ffffff"); 
LD_AddCustomAttr("theme_border", "eeeeee"); 
LD_AddCustomAttr("theme_text", "555555"); 
LD_AddCustomAttr("theme_link", "2970A6"); 
LD_AddCustomAttr("theme_url", "c8c7c7"); 
LD_AddCustomAttr("LangId", "1");
LD_AddCustomAttr("Autotag", "technology");
LD_AddCustomAttr("Tag", "aslr");
LD_AddCustomAttr("Tag", "canary");
LD_AddCustomAttr("Tag", "exploit");
LD_AddCustomAttr("Tag", "fno-stack-protector");
LD_AddCustomAttr("Tag", "nx");
LD_AddCustomAttr("Tag", "randomize_va_space");
LD_AddCustomAttr("Tag", "smashing-the-stack");
LD_AddCustomAttr("Tag", "stack-protection");
LD_AddCustomAttr("Tag", "ubuntu");

LD_AddSlot("wpcom_below_post");
LD_GetBids();
</script>
<iframe id="google_ads_iframe_/9240792/ca-pub-3443918307802676/wpcom_below_post_0" name="google_ads_iframe_/9240792/ca-pub-3443918307802676/wpcom_below_post_0" width="300" height="250" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; "></iframe><iframe id="google_ads_iframe_/9240792/ca-pub-3443918307802676/wpcom_below_post_0__hidden__" name="google_ads_iframe_/9240792/ca-pub-3443918307802676/wpcom_below_post_0__hidden__" width="0" height="0" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; visibility: hidden; display: none; "></iframe></div><div class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-stumbleupon"><a rel="nofollow" class="share-stumbleupon sd-button share-icon" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?share=stumbleupon&nb=1" title="Click to share on StumbleUpon"><span>StumbleUpon</span></a></li><li class="share-digg"><a rel="nofollow" class="share-digg sd-button share-icon" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?share=digg&nb=1" title="Click to Digg this post"><span>Digg</span></a></li><li class="share-reddit"><a rel="nofollow" class="share-reddit sd-button share-icon" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?share=reddit&nb=1" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-end"></li></ul><div class="sharing-clear"></div></div></div><div id="wpl-likebox" class="sd-block sd-like"><h3 class="sd-title">Like this:</h3><div class="sd-content"><div id="wpl-button"><a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?like=1&_wpnonce=ee999cec0d" title="I like this post" class="like needs-login sd-button" rel="nofollow"><span>Like</span></a></div><div id="wpl-count" class="sd-like-count">Be the first to like this post.</div></div></div></div>						<div class="fixed"></div>
		</div>
		<div class="under">
			<span></span>
			<span><span class="tags">Tags: </span><a href="http://paulmakowski.wordpress.com/tag/aslr/" rel="tag">aslr</a>, <a href="http://paulmakowski.wordpress.com/tag/canary/" rel="tag">canary</a>, <a href="http://paulmakowski.wordpress.com/tag/exploit/" rel="tag">exploit</a>, <a href="http://paulmakowski.wordpress.com/tag/fno-stack-protector/" rel="tag">fno-stack-protector</a>, <a href="http://paulmakowski.wordpress.com/tag/nx/" rel="tag">nx</a>, <a href="http://paulmakowski.wordpress.com/tag/randomize_va_space/" rel="tag">randomize_va_space</a>, <a href="http://paulmakowski.wordpress.com/tag/smashing-the-stack/" rel="tag">smashing the stack</a>, <a href="http://paulmakowski.wordpress.com/tag/stack-protection/" rel="tag">stack protection</a>, <a href="http://paulmakowski.wordpress.com/tag/ubuntu/" rel="tag">ubuntu</a></span>
		</div>
		<div class="fixed"></div>
	</div>

	<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/comment.js"></script>



<div id="comments">

<div id="cmtswitcher">
			<a id="commenttab" class="curtab" href="javascript:void(0);" onclick="MGJS.switchTab(&#39;thecomments,commentnavi&#39;, &#39;thetrackbacks&#39;, &#39;commenttab&#39;, &#39;curtab&#39;, &#39;trackbacktab&#39;, &#39;tab&#39;);">Comments (16)</a>
		<a id="trackbacktab" class="tab" href="javascript:void(0);" onclick="MGJS.switchTab(&#39;thetrackbacks&#39;, &#39;thecomments,commentnavi&#39;, &#39;trackbacktab&#39;, &#39;curtab&#39;, &#39;commenttab&#39;, &#39;tab&#39;);">Trackbacks (1)</a>
				<span class="addcomment"><a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#respond">Leave a comment</a></span>
				<span class="addtrackback"><a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/trackback/">Trackback</a></span>
		<div class="fixed"></div>
</div>

<div id="commentlist">
	<!-- comments START -->
	<ol id="thecomments">
		<li class="comment even thread-even depth-1 regularcomment highlander-comment" id="comment-114">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/b389f755da22e15c31568b4505ad10e7" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-b389f755da22e15c31568b4505ad10e7-0">			</div>
			<div class="name">
									<a id="commentauthor-114" class="url" href="http://www.smashthestack.org/" rel="external nofollow">mh</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				January 25, 2011 at 4:57 pm					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-114">#1</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=114#respond" onclick="return addComment.moveForm(&quot;comment-114&quot;, &quot;114&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-114&#39;, &#39;comment-114&#39;, &#39;commentbody-114&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-114">
					<p>Great write up, and something many new exploiters will indeed encounter. We have similar information located on the SmashTheStack forums for how to do exploitation at home on modern systems. You can see it here: <a href="http://smashthestack.org/viewtopic.php?id=388" rel="nofollow">http://smashthestack.org/viewtopic.php?id=388</a></p>
<p>For those interested, SmashTheStack offers a variety of Wargames for shell based local exploitation challenges and exploit development. It’s a great way to take something like this and apply it to unknown challenges.</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>

	<li class="comment odd alt thread-odd thread-alt depth-1 regularcomment highlander-comment" id="comment-115">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/b389f755da22e15c31568b4505ad10e7" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-b389f755da22e15c31568b4505ad10e7-1">			</div>
			<div class="name">
									<a id="commentauthor-115" class="url" href="http://www.smashthestack.org/" rel="external nofollow">mh</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				January 25, 2011 at 4:58 pm					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-115">#2</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=115#respond" onclick="return addComment.moveForm(&quot;comment-115&quot;, &quot;115&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-115&#39;, &#39;comment-115&#39;, &#39;commentbody-115&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-115">
					<p>Also, ‘sudo -u’ will get you a root shell on Ubuntu instead of having to call ‘sudo su’</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>
<ul class="children">
	<li class="comment even depth-2 regularcomment highlander-comment" id="comment-116">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/b389f755da22e15c31568b4505ad10e7" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-b389f755da22e15c31568b4505ad10e7-2">			</div>
			<div class="name">
									<a id="commentauthor-116" class="url" href="http://www.smashthestack.org/" rel="external nofollow">mh</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				January 25, 2011 at 4:59 pm					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-116">#3</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=116#respond" onclick="return addComment.moveForm(&quot;comment-116&quot;, &quot;116&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-116&#39;, &#39;comment-116&#39;, &#39;commentbody-116&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-116">
					<p>Bah, I mean ‘sudo -s’. Brainfart.</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>

</ul>

	<li class="comment byuser comment-author-zubin71 odd alt thread-even depth-1 regularcomment highlander-comment" id="comment-117">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/6fa37fe1fa6e726cf7f6eca8820fa951" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-6fa37fe1fa6e726cf7f6eca8820fa951-0">			</div>
			<div class="name">
									<a id="commentauthor-117" class="url" href="http://www.zubin71.wordpress.com/" rel="external nofollow">Zubin Mithra</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				January 26, 2011 at 6:38 am					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-117">#4</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=117#respond" onclick="return addComment.moveForm(&quot;comment-117&quot;, &quot;117&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-117&#39;, &#39;comment-117&#39;, &#39;commentbody-117&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-117">
					<p>Rather than changing the size to 128 in overflow1.c, you should be changing the stack-boundary value during compilation. gcc allocates space for a variable as multiples of its stack-boundary value AFAIK. For the example in Aleph1′s paper to work out, you need to set the stack boundary to 4 using the </p>
<p>-mpreferred-stack-boundary=2 </p>
<p>argument to gcc. Also if you wish to try out vulnerability development, id suggest you start out with something like DVL and then move onto Ubuntu later on.</p>
<p>Nice read.</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>
<ul class="children">
	<li class="comment byuser comment-author-paulmakowski bypostauthor even depth-2 admincomment highlander-comment" id="comment-118">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/2d19687808fb542a2b41f928dac0017f" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-2d19687808fb542a2b41f928dac0017f-0">			</div>
			<div class="name">
									<a id="commentauthor-118" class="url" href="https://tegosecurity.com/" rel="external nofollow">Paul Makowski</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				January 26, 2011 at 7:59 am					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-118">#5</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=118#respond" onclick="return addComment.moveForm(&quot;comment-118&quot;, &quot;118&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-118&#39;, &#39;comment-118&#39;, &#39;commentbody-118&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-118">
					<p>Good call @ -mpreferred-stack-boundary; I knew I forgot something :)</p>
<p>@DVL: I completed Smashing the Stack on DVL (Damn Vulnerable Linux) 1.5 some years back, but it left me wondering why the examples would work on some intentionally insecure OS while they would fail to work on something that people might actually use.  What is an OS that isn’t Damn Vulnerable doing to prevent such examples from working?  Anyways, it just didn’t feel as if I had accomplished as much on DVL.</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>

</ul>

	<li class="comment odd alt thread-odd thread-alt depth-1 regularcomment highlander-comment" id="comment-119">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/9a822bac6d07cc4106124cc511109719" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-9a822bac6d07cc4106124cc511109719-0">			</div>
			<div class="name">
									<a id="commentauthor-119" class="url" href="http://www.mgraziano.info/" rel="external nofollow">Mariano Graziano</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				February 1, 2011 at 2:29 pm					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-119">#6</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=119#respond" onclick="return addComment.moveForm(&quot;comment-119&quot;, &quot;119&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-119&#39;, &#39;comment-119&#39;, &#39;commentbody-119&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-119">
					<p>Hi Paul,<br>
nice work and overview! Additionally, you can take a look at my work “Smashing the stack in 2010″ @ <a href="http://www.mgraziano.info/docs/stsi2010.pdf" rel="nofollow">http://www.mgraziano.info/docs/stsi2010.pdf</a></p>
<p>cheers,</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>
<ul class="children">
	<li class="comment byuser comment-author-paulmakowski bypostauthor even depth-2 admincomment highlander-comment" id="comment-120">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/2d19687808fb542a2b41f928dac0017f" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-2d19687808fb542a2b41f928dac0017f-1">			</div>
			<div class="name">
									<a id="commentauthor-120" class="url" href="https://tegosecurity.com/" rel="external nofollow">Paul Makowski</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				February 1, 2011 at 2:37 pm					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-120">#7</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=120#respond" onclick="return addComment.moveForm(&quot;comment-120&quot;, &quot;120&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-120&#39;, &#39;comment-120&#39;, &#39;commentbody-120&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-120">
					<p>Woah nice work back at ya!  I briefly looked over your paper – lots of great stuff in it.  I hope you don’t mind if I add it to the “related work” field in this post.</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>

</ul>

	<li class="comment odd alt thread-even depth-1 regularcomment highlander-comment" id="comment-121">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/9a822bac6d07cc4106124cc511109719" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-9a822bac6d07cc4106124cc511109719-1">			</div>
			<div class="name">
									<a id="commentauthor-121" class="url" href="http://www.mgraziano.info/" rel="external nofollow">Mariano Graziano</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				February 1, 2011 at 2:57 pm					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-121">#8</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=121#respond" onclick="return addComment.moveForm(&quot;comment-121&quot;, &quot;121&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-121&#39;, &#39;comment-121&#39;, &#39;commentbody-121&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-121">
					<p>No problem! Add it so your readers have another resource to improve their skills, and after all we are in 2011 thus my work is outdated :)</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>

	<li class="comment even thread-odd thread-alt depth-1 regularcomment highlander-comment" id="comment-122">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/9a822bac6d07cc4106124cc511109719" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-9a822bac6d07cc4106124cc511109719-2">			</div>
			<div class="name">
									<a id="commentauthor-122" class="url" href="http://www.mgraziano.info/" rel="external nofollow">Mariano Graziano</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				February 1, 2011 at 3:38 pm					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-122">#9</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=122#respond" onclick="return addComment.moveForm(&quot;comment-122&quot;, &quot;122&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-122&#39;, &#39;comment-122&#39;, &#39;commentbody-122&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-122">
					<p>Let me know what you think about it. Finally notice that -just for the sake of clarity-  I have written only the Windows part and the analyses of two real attacks while Andrea Cugliari – my classmate – the Linux part.<br>
In order to have papers updated as much as possible about this topic take look at the awesome ax330d’s it-sec-catalog: <a href="https://code.google.com/p/it-sec-catalog/wiki/Exploitation" rel="nofollow">https://code.google.com/p/it-sec-catalog/wiki/Exploitation</a></p>
<p>Happy hacking!</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>

	<li class="comment odd alt thread-even depth-1 regularcomment highlander-comment" id="comment-135">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/6a06f16e3bcea5bdf38e2d2ba316febb" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-6a06f16e3bcea5bdf38e2d2ba316febb-0">			</div>
			<div class="name">
									<span id="commentauthor-135">anon</span>
							</div>
		</div>

		<div class="info">
			<div class="date">
				February 27, 2011 at 8:48 am					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-135">#10</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=135#respond" onclick="return addComment.moveForm(&quot;comment-135&quot;, &quot;135&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-135&#39;, &#39;comment-135&#39;, &#39;commentbody-135&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-135">
					<p>The reason why sudo does no work to disable ASLR is that if you write</p>
<p>$ sudo echo 0 &gt; /proc/sys/kernel/randomize_va_space</p>
<p>the shell (as unprivileged user) will attempt to open /proc/sys/kernel/randomize_va_space before executing “sudo”, which is logical because it has to redirect “sudo” output to it, so it fails.</p>
<p>Anyway, good work! It saves me a lot of time on google.</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>
<ul class="children">
	<li class="comment byuser comment-author-paulmakowski bypostauthor even depth-2 admincomment highlander-comment" id="comment-136">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/2d19687808fb542a2b41f928dac0017f" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-2d19687808fb542a2b41f928dac0017f-2">			</div>
			<div class="name">
									<a id="commentauthor-136" class="url" href="https://tegosecurity.com/" rel="external nofollow">Paul Makowski</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				February 27, 2011 at 8:56 am					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-136">#11</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=136#respond" onclick="return addComment.moveForm(&quot;comment-136&quot;, &quot;136&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-136&#39;, &#39;comment-136&#39;, &#39;commentbody-136&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-136">
					<p>That makes sense – thanks for the tip!</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>

</ul>

	<li class="comment odd alt thread-odd thread-alt depth-1 regularcomment highlander-comment" id="comment-138">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/f47f44ec87a4fe1dc394997960152bc9" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-f47f44ec87a4fe1dc394997960152bc9-0">			</div>
			<div class="name">
									<a id="commentauthor-138" class="url" href="http://carlosrendon.me/" rel="external nofollow">Carlos Rendon</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				March 15, 2011 at 8:36 pm					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-138">#12</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=138#respond" onclick="return addComment.moveForm(&quot;comment-138&quot;, &quot;138&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-138&#39;, &#39;comment-138&#39;, &#39;commentbody-138&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-138">
					<p>Thanks for this article. I’ve been reading John Erickson’s Hacking book, and have had a hard time figuring out how to disable NX.</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>

	<li class="comment even thread-even depth-1 regularcomment highlander-comment" id="comment-164">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/imgpress" class="avatar avatar-32" height="32" width="32">			</div>
			<div class="name">
									<a id="commentauthor-164" class="url" href="http://www.facebook.com/srikanth.raju" rel="external nofollow">Srikanth Raju</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				July 13, 2011 at 1:08 am					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-164">#13</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=164#respond" onclick="return addComment.moveForm(&quot;comment-164&quot;, &quot;164&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-164&#39;, &#39;comment-164&#39;, &#39;commentbody-164&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-164">
					<p>Great article! Helped me a lot understanding issues around buffer overflow and why some of the stuff in that article wasn’t working when I tried them!</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>

	<li class="comment odd alt thread-odd thread-alt depth-1 regularcomment highlander-comment" id="comment-165">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/c510febb9bed68b5cc4a09f076701e0f" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-c510febb9bed68b5cc4a09f076701e0f-0">			</div>
			<div class="name">
									<a id="commentauthor-165" class="url" href="http://gravatar.com/anon4cec" rel="external nofollow">anonymous</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				July 25, 2011 at 2:40 am					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-165">#14</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=165#respond" onclick="return addComment.moveForm(&quot;comment-165&quot;, &quot;165&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-165&#39;, &#39;comment-165&#39;, &#39;commentbody-165&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-165">
					<p>Thanks dude :)</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>

	<li class="comment even thread-even depth-1 regularcomment highlander-comment" id="comment-166">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/41a932163ba37d4c770ca7e536bb0841" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-41a932163ba37d4c770ca7e536bb0841-0">			</div>
			<div class="name">
									<span id="commentauthor-166">spe</span>
							</div>
		</div>

		<div class="info">
			<div class="date">
				July 28, 2011 at 4:44 am					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-166">#15</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=166#respond" onclick="return addComment.moveForm(&quot;comment-166&quot;, &quot;166&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-166&#39;, &#39;comment-166&#39;, &#39;commentbody-166&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-166">
					<p>will there be a problem  if I try this thing on a virtual box machine(ubuntu 10.10), will I have a problem on the host(ubuntu 11.04) machine?</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>
<ul class="children">
	<li class="comment byuser comment-author-paulmakowski bypostauthor odd alt depth-2 admincomment highlander-comment" id="comment-167">
		<div class="author">
			<div class="pic">
				<img alt="" src="./Smashing the Stack in 2011 « my 20%_files/2d19687808fb542a2b41f928dac0017f" class="avatar avatar-32 grav-hashed grav-hijack" height="32" width="32" id="grav-2d19687808fb542a2b41f928dac0017f-3">			</div>
			<div class="name">
									<a id="commentauthor-167" class="url" href="https://tegosecurity.com/" rel="external nofollow">Paul Makowski</a>
							</div>
		</div>

		<div class="info">
			<div class="date">
				July 28, 2011 at 7:41 pm					 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-167">#16</a>
			</div>
			<div class="act">
				<a class="comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?replytocom=167#respond" onclick="return addComment.moveForm(&quot;comment-167&quot;, &quot;167&quot;, &quot;respond&quot;, &quot;367&quot;)">Reply</a> | 				<a href="javascript:void(0);" onclick="MGJS_CMT.quote(&#39;commentauthor-167&#39;, &#39;comment-167&#39;, &#39;commentbody-167&#39;, &#39;comment&#39;);">Quote</a>
							</div>
			<div class="fixed"></div>
			<div class="content">
				
				<div id="commentbody-167">
					<p>I’m not sure what you’re asking.  </p>
<p>If you’re asking whether this tutorial will work as described on an Ubuntu 10.10 VM, it certainly should, considering I wrote the article while consulting an Ubuntu 10.10 VM. </p>
<p>If you’re asking whether doing anything in this article will harm your host installation, certain not.</p>
				</div>
			</div>
		</div>
		<div class="fixed"></div>
	</li>

</ul>

	</ol>
	<!-- comments END -->


	<!-- trackbacks START -->
			<ol id="thetrackbacks">
												<li class="trackback">
						<div class="date">
							January 25, 2011 at 12:33 pm							 | <a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-111">#1</a>
						</div>
						<div class="act">
													</div>
						<div class="fixed"></div>
						<div class="title">
							<a href="http://topsy.com/paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?utm_source=pingback&utm_campaign=L2">
								Tweets that mention Smashing the Stack in 2011 « my 20% — Topsy.com							</a>
						</div>
					</li>
				
					</ol>
		<div class="fixed"></div>
	<!-- trackbacks END -->
</div>

</div>


								<div id="respond" class="js">
				<h3 id="reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://paulmakowski.wordpress.com/wp-comments-post.php" method="post" id="commentform">
																										


												
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	<label for="comment">Enter your comment here...</label>
	<div id="comment-form-comment"><textarea style="resize: none; overflow-y: hidden; position: absolute; top: 0px; left: -9999px; width: 583px; line-height: normal; text-decoration: none; letter-spacing: normal; height: 145px; " tabindex="-1"></textarea><textarea id="comment" name="comment" style="resize: none; overflow-y: hidden; height: 145px; "></textarea></div>
</div>

<div id="comment-form-identity">

	<div id="comment-form-nascar">
		<ul>
			<li class="selected"><a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-form-guest" title="Guest" id="postas-guest" class="social_buttons sb_24 sb_guest"><span>Guest</span></a></li>
			<li><a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-form-wordpress" title="Log In" id="postas-wordpress" class="social_buttons sb_24 sb_wordpress"><span>Log In</span></a></li>
			<li><a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-form-load-service:Twitter" title="Log In" id="postas-twitter" class="social_buttons sb_24 sb_twitter"><span>Log In</span></a></li>
			<li><a href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#comment-form-load-service:Facebook" title="Log In" id="postas-facebook" class="social_buttons sb_24 sb_facebook"><span>Log In</span></a></li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="./Smashing the Stack in 2011 « my 20%_files/ad516503a11cd5ca435acc9bb6523536" alt="Gravatar" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Not published)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="text" value=""></div>
				</div> 
			</div>
	
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="./Smashing the Stack in 2011 « my 20%_files/wplogo.png" alt="WordPress.com Logo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
					<p id="wordpress-login-first">Please log in to WordPress.com to post a comment to your blog.</p>
				<iframe id="wordpress-login-iframe" data-srcurl="http://paulmakowski.wordpress.com/wp-login.php?redirect_to=http%3A%2F%2Fpaulmakowski.wordpress.com%2Fhighlander.login%2F&amp;action=highlander-login&amp;skin=light"></iframe>
				</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="./Smashing the Stack in 2011 « my 20%_files/ad516503a11cd5ca435acc9bb6523536" alt="Twitter picture" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
				<p class="comment-form-posting-as"><strong></strong> You are commenting using your Twitter account. <span class="comment-form-log-out">(<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log Out</a>)</span></p>
			</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="./Smashing the Stack in 2011 « my 20%_files/ad516503a11cd5ca435acc9bb6523536" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
				<p class="comment-form-posting-as"><strong></strong> You are commenting using your Facebook account. <span class="comment-form-log-out">(<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log Out</a>)</span></p>
			</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service"> 
		<p>Connecting to %s</p> 
	</div>

	
</div>


<div id="comment-form-subscribe"> 
<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;" tabindex="6"> <label class="subscribe-label" id="subscribe-label" for="subscribe">Notify me of follow-up comments via email.</label></p><p class="comment-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;" tabindex="7"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog">Notify me of new posts via email.</label></p></div>
												<p class="form-submit">
							<input name="submit" type="submit" id="comment-submit" value="Post Comment">
							<input type="hidden" name="comment_post_ID" value="367" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
						</p>
						
<input type="hidden" name="genseq" value="1314866444">
<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="6c5c3fc0ed"></p><script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/form.js"></script>
<p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="1314866449244"></p>					</form>
							</div><!-- #respond -->
			<div style="clear: both"></div>			
	

	<div id="postnavi">
		<span class="prev"></span>
		<span class="next"><a href="http://paulmakowski.wordpress.com/2010/07/07/chaocipher-now-with-ascii-support/" rel="prev">Chaocipher: Now with&nbsp;ASCII&nbsp;Support</a></span>
		<div class="fixed"></div>
	</div>


	</div>
	<!-- main END -->

	
<!-- sidebar START -->
<div id="sidebar">

<!-- sidebar north START -->
<div id="northsidebar" class="sidebar">

	<!-- feeds -->
	<div class="widget widget_feeds">
		<div class="content">
			<div id="subscribe">
				<a rel="external nofollow" id="feedrss" title="Subscribe to this blog..." href="http://paulmakowski.wordpress.com/feed/"><abbr title="Really Simple Syndication">RSS</abbr> feed</a>
									<ul id="feed_readers">
						<li id="google_reader"><a rel="external nofollow" class="reader" title="Subscribe with Google" href="http://fusion.google.com/add?feedurl=http://paulmakowski.wordpress.com/feed/"><span>Google</span></a></li>
						<li id="youdao_reader"><a rel="external nofollow" class="reader" title="Subscribe with Youdao" href="http://reader.youdao.com/#url=http://paulmakowski.wordpress.com/feed/"><span>Youdao</span></a></li>
						<li id="xianguo_reader"><a rel="external nofollow" class="reader" title="Subscribe with Xian Guo" href="http://www.xianguo.com/subscribe.php?url=http://paulmakowski.wordpress.com/feed/"><span>Xian Guo</span></a></li>
						<li id="zhuaxia_reader"><a rel="external nofollow" class="reader" title="Subscribe with Zhua Xia" href="http://www.zhuaxia.com/add_channel.php?url=http://paulmakowski.wordpress.com/feed/"><span>Zhua Xia</span></a></li>
						<li id="yahoo_reader"><a rel="external nofollow" class="reader" title="Subscribe with My Yahoo!" href="http://add.my.yahoo.com/rss?url=http://paulmakowski.wordpress.com/feed/"><span>My Yahoo!</span></a></li>
						<li id="newsgator_reader"><a rel="external nofollow" class="reader" title="Subscribe with newsgator" href="http://www.newsgator.com/ngs/subscriber/subfext.aspx?url=http://paulmakowski.wordpress.com/feed/"><span>newsgator</span></a></li>
						<li id="bloglines_reader"><a rel="external nofollow" class="reader" title="Subscribe with Bloglines" href="http://www.bloglines.com/sub/http://paulmakowski.wordpress.com/feed/"><span>Bloglines</span></a></li>
						<li id="inezha_reader"><a rel="external nofollow" class="reader" title="Subscribe with iNezha" href="http://inezha.com/add?url=http://paulmakowski.wordpress.com/feed/"><span>iNezha</span></a></li>
					</ul>
							</div>

			<!-- twitter -->
			
			<div class="fixed"></div>
		</div>
	</div>

	<!-- showcase -->
	
<div id="gravatar-4" class="widget widget_gravatar"><h3>Paul Makowski</h3><p><a href="https://tegosecurity.com/"><img alt="" src="./Smashing the Stack in 2011 « my 20%_files/2d19687808fb542a2b41f928dac0017f(1)" class="avatar avatar-128 grav-hashed" height="128" width="128" style="margin-top: 3px; padding: 0 0.5em 0 0; float: left" id="grav-2d19687808fb542a2b41f928dac0017f-4"></a>I'm an MSISTM student at Carnegie Mellon's Information Networking Institute (INI). I enjoy breaking things more than building them; I use this blog to publish my successes at putting things back together.</p>
</div><div id="rss-2" class="widget widget_rss"><h3><a class="rsswidget" href="http://www.google.com/reader/public/atom/user%2F16894783967708706728%2Fstate%2Fcom.google%2Fbroadcast" title="Syndicate this content"><img style="background:orange;color:white;border:none;" width="14" height="14" src="./Smashing the Stack in 2011 « my 20%_files/rss.png" alt="RSS"></a> <a class="rsswidget" href="" title="">things worth reading</a></h3><ul><li><a class="rsswidget" href="http://community.corest.com/~gera/InsecureProgramming/" title="">gera's InsecureProgramming page</a> <span class="rss-date">March 12, 2011</span></li><li><a class="rsswidget" href="https://code.google.com/p/it-sec-catalog/wiki/Exploitation" title="">Exploitation - it-sec-catalog - References to vulnerability exploitation stuff. - Project Hosting on Google Code</a> <span class="rss-date">February 4, 2011</span></li><li><a class="rsswidget" href="http://www.hackinthebox.org/index.php?name=News&file=article&sid=39544" title="Attack Surface Analyzer is the same tool used by Microsoft&#39;s internal product teams to catalogue changes made to the operating system by the installation of new software. The tool takes snapshots of an organization&#39;s system and compares (&quot;diffing&quot;) these to identify changes. The tool does not analyze a system based on signatures or known  […]">Microsoft releases Attack Surface Analyzer tool</a> <span class="rss-date">January 19, 2011</span></li><li><a class="rsswidget" href="http://www.hackinthebox.org/index.php?name=News&file=article&sid=39450" title="Citing free speech, a Carnegie Mellon University professor is hosting the files embattled hacker George &quot;GeoHot&quot; Hotz used to crack the PlayStation 3. Oh, and the prof also said Sony is &quot;breathtakingly stupid&quot; for sicking its legal team on Hotz and the hacking group known as FailOverflow. Shortly after Hotz revealed he was being sued by S […]">Carnegie Mellon Professor Backs PlayStation 3 Hackers</a> <span class="rss-date">January 14, 2011</span></li><li><a class="rsswidget" href="http://ilm.thinkst.com/folklore/combo.shtml" title="Shared by  my.hndl   great resource  ">folklore fun - thinkst.com</a> <span class="rss-date">January 10, 2011</span></li><li><a class="rsswidget" href="http://www.google.com/reader/item/tag:google.com,2005:reader/item/843e5f8f41a60072" title="Shared by  my.hndl   good summary  ">(title unknown)</a> <span class="rss-date">January 10, 2011</span></li><li><a class="rsswidget" href="http://events.ccc.de/congress/2010/wiki/Documentation" title="Shared by  my.hndl   some great talks this year  ">Documentation - 27C3 public wiki</a> <span class="rss-date">January 8, 2011</span></li><li><a class="rsswidget" href="http://www.breakingpointsystems.com/community/blog/ie-vulnerability/" title="Shared by  my.hndl   one of the best breakdowns i&#39;ve seen in a while Internet Explorer vulnerability is examined and how it is not a DoS. The Internet Explorer vulnerability is outlined in detail and how it could be used as an exploit. ">When A DoS Isn't A DoS | BreakingPoint</a> <span class="rss-date">January 2, 2011</span></li><li><a class="rsswidget" href="http://www.lightbluetouchpaper.org/2010/12/25/a-merry-christmas-to-all-bankers/" title="">Light Blue Touchpaper » Blog Archive » A Merry Christmas to all Bankers</a> <span class="rss-date">January 2, 2011</span></li><li><a class="rsswidget" href="http://blog.mylookout.com/2010/12/geinimi_trojan/" title="">The Official Lookout Blog | Security Alert: Geinimi, Sophisticated New Android Trojan Found in Wild</a> <span class="rss-date">January 2, 2011</span></li></ul></div>		<div id="recent-posts-3" class="widget widget_recent_entries">		<h3>Recent Posts</h3>		<ul>
				<li><a href="./Smashing the Stack in 2011 « my 20%_files/Smashing the Stack in 2011 « my 20%.htm" title="Smashing the Stack in 2011">Smashing the Stack in&nbsp;2011</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2010/07/07/chaocipher-now-with-ascii-support/" title="Chaocipher: Now with ASCII Support">Chaocipher: Now with&nbsp;ASCII&nbsp;Support</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2010/06/29/woohoo-i-graduated-heres-my-thesis/" title="Woohoo!  I Graduated.  Here’s my thesis.">Woohoo!  I Graduated.  Here’s my&nbsp;thesis.</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2010/05/08/senior-thesis-trecc-presentations/" title="Senior Thesis (TRECC) Presentations">Senior Thesis (TRECC)&nbsp;Presentations</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2010/04/19/metasploit-plugin-for-easyftp-server-exploit/" title="Metasploit Plugin for EasyFTP Server Exploit">Metasploit Plugin for EasyFTP Server&nbsp;Exploit</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2010/02/28/increasing-payload-size-w-return-address-overwrite/" title="Increasing Payload Size w/ Return Address Overwrite">Increasing Payload Size w/ Return Address&nbsp;Overwrite</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2010/02/11/efipw-v0-2b-released/" title="efipw v0.2b Released">efipw v0.2b&nbsp;Released</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2010/01/30/efipw-v0-2-released/" title="efipw v0.2 Released">efipw v0.2&nbsp;Released</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2009/09/30/from-pass_file-to-script-kiddies/" title="From pass_file to Script Kiddies">From pass_file to Script&nbsp;Kiddies</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2009/09/28/hacking-sshd-for-a-pass_file/" title="Hacking sshd for a pass_file">Hacking sshd for a&nbsp;pass_file</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2009/08/16/a-closer-look-at-the-twitter-controlled-botnet-part-1/" title="A Closer Look at the Twitter-Controlled Botnet (Part 1)">A Closer Look at the Twitter-Controlled Botnet (Part&nbsp;1)</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2009/07/20/http-post-https-bad-idea/" title="HTTP POST -&gt; HTTPS = Bad Idea®">HTTP POST -&gt; HTTPS = Bad&nbsp;Idea®</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2009/05/24/gdb-crackme/" title="GDB Crackme">GDB&nbsp;Crackme</a></li>
				<li><a href="http://paulmakowski.wordpress.com/2009/03/30/fun-with-apple-efi-firmware-passwords/" title="Fun with Apple EFI Firmware Passwords">Fun with Apple EFI Firmware&nbsp;Passwords</a></li>
				</ul>
		</div><div id="archives-2" class="widget widget_archive"><h3>Archives</h3>		<ul>
			<li><a href="http://paulmakowski.wordpress.com/2011/01/" title="January 2011">January 2011</a></li>
	<li><a href="http://paulmakowski.wordpress.com/2010/07/" title="July 2010">July 2010</a></li>
	<li><a href="http://paulmakowski.wordpress.com/2010/06/" title="June 2010">June 2010</a></li>
	<li><a href="http://paulmakowski.wordpress.com/2010/05/" title="May 2010">May 2010</a></li>
	<li><a href="http://paulmakowski.wordpress.com/2010/04/" title="April 2010">April 2010</a></li>
	<li><a href="http://paulmakowski.wordpress.com/2010/02/" title="February 2010">February 2010</a></li>
	<li><a href="http://paulmakowski.wordpress.com/2010/01/" title="January 2010">January 2010</a></li>
	<li><a href="http://paulmakowski.wordpress.com/2009/09/" title="September 2009">September 2009</a></li>
	<li><a href="http://paulmakowski.wordpress.com/2009/08/" title="August 2009">August 2009</a></li>
	<li><a href="http://paulmakowski.wordpress.com/2009/07/" title="July 2009">July 2009</a></li>
	<li><a href="http://paulmakowski.wordpress.com/2009/05/" title="May 2009">May 2009</a></li>
	<li><a href="http://paulmakowski.wordpress.com/2009/03/" title="March 2009">March 2009</a></li>
		</ul>
</div><div id="blog_subscription-3" class="widget widget_blog_subscription"><h3><label for="subscribe-field">Follow Blog</label></h3>
			<a class="sub-button follow" id="f-9037365" href="http://wordpress.com/following?b=9037365&_wpnonce=07b9f0f1c8">Follow</a>
		
							<form class="follow-blog-form" action="http://subscribe.wordpress.com/" method="post" accept-charset="utf-8" id="subscribe-blog" style="display: none; ">
						<p>Enter your email address to follow this blog and receive notifications of new posts by email.</p>
<p>Join 1 other follower</p>

						<p><input type="text" name="email" style="width: 95%; padding: 1px 2px" value="" id="subscribe-field"></p>

						<input type="hidden" name="action" value="subscribe">
						<input type="hidden" name="blog_id" value="9037365">
						<input type="hidden" name="source" value="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/">
						<input type="hidden" name="sub-type" value="widget">

						<input type="hidden" id="_wpnonce" name="_wpnonce" value="644382b7c8"><input type="hidden" name="_wp_http_referer" value="/2011/01/25/smashing-the-stack-in-2011/">
						<p><input type="submit" value="Sign me up!"></p>
					</form>
								
			<script type="text/javascript">
				jQuery( '.follow-blog-form' ).hide();
				
				jQuery( 'a.follow' ).live( 'click.fol', function(e) { e.preventDefault(); jQuery( '.follow-blog-form' ).slideDown( 'fast' ); });
			</script>
			
		<style type="text/css">
			a.sub-button {
				line-height: 155%;
				display: inline-block;
				padding: 2px 6px 1px 20px !important;
				margin: 5px 0 10px 0;
				font-family: sans-serif;
				color: #777;
				border-right: 1px solid #ddd;
				border-bottom: 1px solid #ddd;
				-moz-border-radius: 3px;
				-webkit-border-radius: 3px;
				border-radius: 3px;
				background: #fff url( http://wordpress.com/wp-content/themes/h4/i/subsprite.png ) 5px -32px no-repeat;
				font-size: 12px;
			}
			a.sub-button:hover {
				text-decoration: none;
				color: #21759b;
			}

			a.following {
				background-color: #21759b;
				background-position: 5px -50px;
				color: #fff;
				border: none;
			}
				a.following:hover {
					background-color: #21759b;
					border-color: #21759b;
					color: #fff;
				}
		</style>
		
</div>	</div>
</div>
<!-- sidebar END -->
	<div class="fixed"></div>
</div>
<!-- content END -->

<!-- footer START -->
<div id="footer">
	<a id="gotop" href="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/#" onclick="MGJS.goTop();return false;">Top</a>
	<a id="powered" href="http://wordpress.com/">WordPress</a>
	<div id="copyright">
		Copyright © 2009-2011 my 20%	</div>
	<div id="themeinfo">
		<a href="http://wordpress.com/?ref=footer" rel="generator">Blog at WordPress.com</a>. Theme: <a href="http://theme.wordpress.com/themes/inove/">INove</a> by <a href="http://www.neoease.com/" rel="designer">NeoEase</a>. 	</div>
</div>
<!-- footer END -->

</div>
<!-- container END -->
</div><iframe style="border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; width: 0px; height: 0px; "></iframe>
<!-- wrap END -->

<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script><script type="text/javascript">_qoptions={qacct:'p-18-mFEk4J448M',labels:'language.en,type.wpcom,posttag.aslr,posttag.canary,posttag.exploit,posttag.fno-stack-protector,posttag.nx,posttag.randomize_va_space,posttag.smashing-the-stack,posttag.stack-protection,posttag.ubuntu'};</script>
<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/quant.js"></script>
<noscript>&lt;p&gt;&lt;img class="robots-nocontent" src="http://pixel.quantserve.com/pixel/p-18-mFEk4J448M.gif?labels=language.en%2Ctype.wpcom%2Cposttag.aslr%2Cposttag.canary%2Cposttag.exploit%2Cposttag.fno-stack-protector%2Cposttag.nx%2Cposttag.randomize_va_space%2Cposttag.smashing-the-stack%2Cposttag.stack-protection%2Cposttag.ubuntu" style="display:none" height="1" width="1" alt="" /&gt;&lt;/p&gt;</noscript>
	<script type="text/javascript">
	/* <![CDATA[ */
		jQuery(document).ready( function($) {
			
			$('#wpl-button > a.like').click( function(e) {
				e.preventDefault();
				
				$('#wpl-mustlogin').remove();
				
				$.post( 'http://paulmakowski.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_like_click'
				} );

				var tenMins = new Date();
				tenMins.setTime( tenMins.getTime() + 600000 );
				document.cookie = 'wpl_rand=6e674be78c; expires=' + tenMins.toGMTString() + '; domain=wordpress.com; path=/;';
				
				$('#wpl-count').after( '\
					<div id="wpl-mustlogin"> \
						<form action="https://paulmakowski.wordpress.com/wp-login.php" method="post"> \
							<p>Just one more step to like this post:</p> \
							<label><span>Username</span> <input type="text" name="log" id="user_login" class="input" value="" size="20" tabindex="80" /></label> \
							<label><span>Password</span> <input type="password" name="pwd" id="user_pass" class="input" value="" size="20" tabindex="81" /></label> \
							<input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="Log In" tabindex="82" /> \
							<input type="hidden" name="redirect_to" value="http://paulmakowski.wordpress.com/2011/01/25/smashing-the-stack-in-2011/?like=1" /> \
							<input type="hidden" name="wpl_rand" value="6e674be78c" /> \
							<p>Not a member yet? <a href="http://wordpress.com/signup/?ref=likebox" id="wpl-signup-link">Sign up with WordPress.com</a></p> \
						</form> \
					</div> \
				');
				
				$('#wpl-mustlogin').hide().slideDown('fast');
			} );
			
			$('#wpl-mustlogin input.input').live( 'focus', function() {
				$(this).prev().hide();
			}).live( 'blur', function() {
				if ( $(this).val() == '' )
					$(this).prev().show();
			});
			
			$('#wpl-mustlogin input#wp-submit').live( 'click', function(e) {
				e.preventDefault();
				
				$.post( 'http://paulmakowski.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_login_submit'
				}, function() {
					$('#wpl-mustlogin form').submit();
				} );
			});			
			
			$('#wpl-mustlogin a#wpl-signup-link').live( 'click', function(e) {
				e.preventDefault();
				
				var link = $(this).attr('href');
				
				$.post( 'http://paulmakowski.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_signup_click'
				}, function() {
					location.href = link;
				} );
			});					
			
		});
	/* ]]> */
	</script>
<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/gprofiles.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};

/* ]]> */
</script>
<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/wpgroho.js"></script>
	<div style="display:none">
	<div class="grofile-hash-map-b389f755da22e15c31568b4505ad10e7">
	</div>
	<div class="grofile-hash-map-6fa37fe1fa6e726cf7f6eca8820fa951">
	</div>
	<div class="grofile-hash-map-2d19687808fb542a2b41f928dac0017f">
	</div>
	<div class="grofile-hash-map-9a822bac6d07cc4106124cc511109719">
	</div>
	<div class="grofile-hash-map-6a06f16e3bcea5bdf38e2d2ba316febb">
	</div>
	<div class="grofile-hash-map-f47f44ec87a4fe1dc394997960152bc9">
	</div>
	<div class="grofile-hash-map-aec89ca7ef961bed06bf8bfb397c6482">
	</div>
	<div class="grofile-hash-map-c510febb9bed68b5cc4a09f076701e0f">
	</div>
	<div class="grofile-hash-map-41a932163ba37d4c770ca7e536bb0841">
	</div>
	<div class="grofile-hash-map-2d19687808fb542a2b41f928dac0017f">
	</div>
	</div>
<script type="text/javascript">
/* <![CDATA[ */
var HighlanderComments = {"loggingInText":"Logging In&hellip;","submittingText":"Posting Comment&hellip;","postCommentText":"Post Comment","connectingToText":"Connecting to %s","commentingAsText":"%1$s: You are commenting using your %2$s account.","logoutText":"Log Out","loginText":"Log In","connectURL":"http:\/\/paulmakowski.wordpress.com\/public.api\/connect\/?action=request","homeURL":"http:\/\/paulmakowski.wordpress.com\/","postID":367,"gravDefault":"identicon","enterACommentError":"Please enter a comment","enterEmailError":"Email address required","invalidEmailError":"Invalid email address","enterAuthorError":"Name required"};

/* ]]> */
</script>
<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/script.js"></script>
 
		<img src="./Smashing the Stack in 2011 « my 20%_files/b.gif" alt="" style="display:none">
		<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/sharing.js"></script>
<script type="text/javascript" src="./Smashing the Stack in 2011 « my 20%_files/beacon.js"></script><script type="text/javascript">try{COMSCORE.beacon({c1:2,c2:7518284});}catch(e){}</script><noscript>&lt;p class="robots-nocontent"&gt;&lt;img src="http://b.scorecardresearch.com/p?cj=1c1=2&amp;#038;c2=7518284" alt="" style="display:none" width="1" height="1" /&gt;&lt;/p&gt;</noscript><script src="./Smashing the Stack in 2011 « my 20%_files/w.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({'blog':'9037365','v':'wpcom','user_id':'0','post':'367','subd':'paulmakowski'});
ex_go({'crypt':'UE5XaFBLcG9pbC5FaS41aW9PdXwsa05Za112c0hWbDhGa2gtT3U0cGtmNlQvP1phckNnMmU2alN8WDljcnQ4bF9zLG5YLi9VaFVrai9GOVZ5b1BkLWhBV2k0a3IsUE44emxdSFU1ZStVcl0xWUp+dV1uRFVXWkdUSl1EeVBpN1gsbEwlR0tuRmV5PXlwXXxvPzNvc1QvW10wJnRlaS5hNDRbUDMyYW9iRlZ+UjZrXzBTQUxISTdmVVcsTml5Yk9BMmt5c3E/YUNadVB+aXY3Ui0uLUN6LE5hM3dpUjVKenotTS10NlhXcGxLWVIwRDY5PWxqfEJLeHZNQ0hvb2ZG'});
addLoadEvent(function(){linktracker_init('9037365',367);});
	</script><img id="wpstats" src="./Smashing the Stack in 2011 « my 20%_files/g.gif" alt=""><img id="wpstats2" src="./Smashing the Stack in 2011 « my 20%_files/g(1).gif" alt="" style="display:none">
<noscript>&lt;img src="http://stats.wordpress.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="" /&gt;</noscript>



</body></html>